version: '3.8'

services:
  # AMAS Intelligence Core Services
  amas-api:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    container_name: amas-api
    ports:
      - "8000:8000"
    environment:
      - AMAS_MODE=production
      - AMAS_OFFLINE_MODE=true
      - AMAS_GPU_ENABLED=true
      - AMAS_LOG_LEVEL=INFO
      - AMAS_JWT_SECRET=${AMAS_JWT_SECRET}
      - AMAS_ENCRYPTION_KEY=${AMAS_ENCRYPTION_KEY}
      - AMAS_AUDIT_ENABLED=true
      - AMAS_LLM_HOST=ollama:11434
      - AMAS_VECTOR_HOST=vector-service:8001
      - AMAS_GRAPH_HOST=neo4j:7474
      - AMAS_REDIS_HOST=redis:6379
      - AMAS_POSTGRES_HOST=postgres:5432
    volumes:
      - ../data:/app/data
      - ../logs:/app/logs
      - ../config:/app/config
    depends_on:
      - ollama
      - vector-service
      - neo4j
      - redis
      - postgres
    networks:
      - amas-network
    restart: unless-stopped

  # LLM Service (Ollama)
  ollama:
    image: ollama/ollama:latest
    container_name: amas-ollama
    ports:
      - "11434:11434"
    environment:
      - OLLAMA_HOST=0.0.0.0
    volumes:
      - ollama_data:/root/.ollama
    networks:
      - amas-network
    restart: unless-stopped
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  # Vector Service (FAISS)
  vector-service:
    build:
      context: ../services
      dockerfile: Dockerfile.vector
    container_name: amas-vector
    ports:
      - "8001:8001"
    environment:
      - VECTOR_HOST=0.0.0.0
      - VECTOR_PORT=8001
      - VECTOR_GPU_ENABLED=true
      - VECTOR_INDEX_TYPE=faiss
    volumes:
      - vector_data:/app/data
    networks:
      - amas-network
    restart: unless-stopped
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  # Knowledge Graph (Neo4j)
  neo4j:
    image: neo4j:5.15-community
    container_name: amas-neo4j
    ports:
      - "7474:7474"
      - "7687:7687"
    environment:
      - NEO4J_AUTH=neo4j/${NEO4J_PASSWORD}
      - NEO4J_PLUGINS=["apoc"]
      - NEO4J_apoc_export_file_enabled=true
      - NEO4J_apoc_import_file_enabled=true
      - NEO4J_apoc_import_file_use__neo4j__config=true
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - neo4j_import:/var/lib/neo4j/import
      - neo4j_plugins:/plugins
    networks:
      - amas-network
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: amas-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - amas-network
    restart: unless-stopped

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: amas-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=amas
      - POSTGRES_USER=amas
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - amas-network
    restart: unless-stopped

  # n8n Workflow Engine
  n8n:
    image: n8nio/n8n:latest
    container_name: amas-n8n
    ports:
      - "5678:5678"
    environment:
      - N8N_BASIC_AUTH_ACTIVE=true
      - N8N_BASIC_AUTH_USER=admin
      - N8N_BASIC_AUTH_PASSWORD=${N8N_PASSWORD}
      - N8N_HOST=0.0.0.0
      - N8N_PORT=5678
      - N8N_PROTOCOL=http
      - N8N_EDITOR_BASE_URL=http://localhost:5678
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=postgres
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_DATABASE=n8n
      - DB_POSTGRESDB_USER=amas
      - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - n8n_data:/home/node/.n8n
    depends_on:
      - postgres
    networks:
      - amas-network
    restart: unless-stopped

  # Web Interface
  web-interface:
    build:
      context: ../web
      dockerfile: Dockerfile
    container_name: amas-web
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:8000
      - REACT_APP_N8N_URL=http://localhost:5678
    depends_on:
      - amas-api
    networks:
      - amas-network
    restart: unless-stopped

  # Monitoring (Prometheus)
  prometheus:
    image: prom/prometheus:latest
    container_name: amas-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ../monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - amas-network
    restart: unless-stopped

  # Monitoring (Grafana)
  grafana:
    image: grafana/grafana:latest
    container_name: amas-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
      - ../monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ../monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - amas-network
    restart: unless-stopped

  # Nginx Load Balancer
  nginx:
    image: nginx:alpine
    container_name: amas-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ../nginx/nginx.conf:/etc/nginx/nginx.conf
      - ../nginx/ssl:/etc/nginx/ssl
    depends_on:
      - amas-api
      - web-interface
    networks:
      - amas-network
    restart: unless-stopped

volumes:
  ollama_data:
  vector_data:
  neo4j_data:
  neo4j_logs:
  neo4j_import:
  neo4j_plugins:
  redis_data:
  postgres_data:
  n8n_data:
  prometheus_data:
  grafana_data:

networks:
  amas-network:
    driver: bridge