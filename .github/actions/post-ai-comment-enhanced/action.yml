name: 'Post AI Comment (Enhanced)'
description: 'Post clean, processed AI analysis comments to PRs with bulletproof validation. Requires Python 3.11+ (use actions/setup-python@v5 in parent workflow).'
inputs:
  workflow-type:
    description: 'Type of AI workflow'
    required: true
  result-file:
    description: 'Path to AI analysis result file'
    required: false
    default: 'artifacts/ai_analysis_results.json'
  outputs-file:
    description: 'Path to write the processed PR comment markdown'
    required: false
    default: 'pr_comment.md'
  success-message:
    description: 'Success message to show'
    required: false
    default: 'AI analysis completed successfully'

outputs:
  comment-file:
    description: 'Path to the generated comment file'
    value: ${{ steps.process-ai-output.outputs.comment-file }}

runs:
  using: 'composite'
  steps:
    - name: 🤖 Process AI Output
      id: process-ai-output
      shell: bash
      run: |
        set -euo pipefail
        trap 'echo "::error::Processing failed at line $LINENO"' ERR
        
        # Inputs
        result_file="${{ inputs.result-file }}"
        output_file="${{ inputs.outputs-file }}"
        workflow_type="${{ inputs.workflow-type }}"
        
        echo "Processing AI output for $workflow_type..."
        
        # Validate result_file for safe characters and prevent path traversal
        if [[ ! "$result_file" =~ ^[a-zA-Z0-9._\-/]+$ ]]; then
          echo "::error::Invalid characters in result-file path: $result_file"
          exit 1
        fi
        
        # Reject absolute paths
        if [[ "$result_file" = /* ]]; then
          echo "::error::Absolute paths are not allowed: $result_file"
          exit 1
        fi
        
        # Reject explicit path traversal attempts
        if [[ "$result_file" == ".." ]] || [[ "$result_file" == *"/.."* ]] || [[ "$result_file" == *"../"* ]]; then
          echo "::error::Path traversal not allowed: $result_file"
          exit 1
        fi
        
        # Ensure output directory exists
        mkdir -p "$(dirname "$output_file")"
        
        if [[ -f "$result_file" ]]; then
          echo "Using result file: $result_file"
          
          # Validate JSON structure
          if ! command -v jq &>/dev/null; then
            echo "::warning::jq not available, using basic processing"
            
            # Fallback: try python JSON validation and simple processing
            if ! python3 -c "import json; json.load(open('$result_file'))" 2>/dev/null; then
              echo "::error::Invalid JSON in result file: $result_file"
              exit 1
            fi
            
            # Use the existing process_ai_output.py script
            if ! python3 .github/scripts/process_ai_output.py "$result_file"; then
              echo "::error::Failed to process AI output from $result_file"
              exit 1
            fi
            
            # Check if it generated the expected output
            if [[ -f "pr_comment.md" ]] && [[ -s "pr_comment.md" ]]; then
              if [[ "$output_file" != "pr_comment.md" ]]; then
                mv "pr_comment.md" "$output_file"
              fi
            else
              echo "::error::process_ai_output.py did not generate pr_comment.md"
              exit 1
            fi
          else
            # Advanced processing with jq
            if ! jq empty "$result_file" 2>/dev/null; then
              echo "::error::Invalid JSON in result file: $result_file"
              exit 1
            fi
            
            # Extract analysis data and generate markdown
            analysis=$(jq -r '.analysis // .ai_analysis.analysis // "No analysis available"' "$result_file")
            provider=$(jq -r '.provider // .ai_analysis.provider // .metadata.provider_used // "Unknown"' "$result_file")
            response_time=$(jq -r '.response_time // .ai_analysis.response_time // .metadata.response_time // 0' "$result_file")
            bulletproof_validated=$(jq -r '.bulletproof_validated // .metadata.bulletproof_validated // false' "$result_file")
            real_ai_verified=$(jq -r '.real_ai_verified // .ai_analysis.real_ai_verified // false' "$result_file")
            fake_ai_detected=$(jq -r '.fake_ai_detected // .ai_analysis.fake_ai_detected // true' "$result_file")
            
            # Generate comprehensive comment
            cat > "$output_file" << EOF
## 🤖 BULLETPROOF REAL AI Analysis

**Status:** $(if [[ "$bulletproof_validated" == "true" ]]; then echo "✅ REAL AI Verified"; else echo "❌ FAKE AI Detected"; fi)
**Provider:** $provider $(if [[ "$real_ai_verified" == "true" ]]; then echo "(CONFIRMED REAL API CALL)"; else echo "(Unverified)"; fi)
**Response Time:** ${response_time}s
**Validation:** $(if [[ "$bulletproof_validated" == "true" ]]; then echo "Bulletproof validated ✓"; else echo "Validation failed ✗"; fi)

---

### 🔍 Analysis
\`\`\`
$analysis
\`\`\`

---

### 📊 Verification Proof
- **Real AI Verified:** $(if [[ "$real_ai_verified" == "true" ]]; then echo "✅ true"; else echo "❌ false"; fi)
- **Fake AI Detected:** $(if [[ "$fake_ai_detected" == "false" ]]; then echo "❌ false"; else echo "✅ true"; fi)
- **Bulletproof Validated:** $(if [[ "$bulletproof_validated" == "true" ]]; then echo "✅ true"; else echo "❌ false"; fi)

---

*Generated by $workflow_type workflow*  
*🛡️ Protected by BULLETPROOF AI Detection System*
EOF
          fi
          
          # Final validation that output was created
          if [[ ! -s "$output_file" ]]; then
            echo "::error::Failed to generate non-empty output file: $output_file"
            exit 1
          fi
          
          echo "Generated comment file: $output_file"
          echo "comment-file=$output_file" >> $GITHUB_OUTPUT
          
        else
          echo "::warning::AI result file not found, generating fallback comment: $output_file"
          
          # Complete heredoc fallback (no truncation)
          cat > "$output_file" << 'EOF'
## 🤖 AI Analysis Unavailable

**Status:** ❌ Analysis Failed  
**Reason:** Expected analysis result file was not found

---

### 🔧 What You Can Do
- **Re-run the workflow** that generates the analysis artifact
- **Check API key configuration** for real AI providers
- **Review previous step logs** for errors or failures
- **Verify workflow permissions** (contents: read, pull-requests: write)

### 🚀 Recommended Actions
- Use consistent logging (`::warning::`, `::error::`) in workflows
- Pin Python version to 3.11 with `actions/setup-python@v5`
- Perform regular dependency security audits (`pip-audit`, `safety`)
- Ensure at least one valid AI provider API key is configured

---

*🛡️ Protected by BULLETPROOF AI Detection System*  
*No fake responses generated when analysis unavailable*
EOF
          
          # Verify fallback was created
          if [[ ! -s "$output_file" ]]; then
            echo "::error::Failed to create fallback comment: $output_file"
            exit 1
          fi
          
          echo "comment-file=$output_file" >> $GITHUB_OUTPUT
        fi

    - name: 📝 Post Comment to PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const outputFile = '${{ steps.process-ai-output.outputs.comment-file }}';
          
          try {
            if (!fs.existsSync(outputFile)) {
              throw new Error(`Comment file not found: ${outputFile}`);
            }
            
            const commentContent = fs.readFileSync(outputFile, 'utf8');
            
            if (!commentContent || commentContent.trim().length === 0) {
              throw new Error(`Comment file is empty: ${outputFile}`);
            }
            
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: commentContent
            });
            
            console.log(`AI comment posted successfully from: ${outputFile}`);
          } catch (error) {
            console.error('Failed to post AI comment:', error);
            core.setFailed(`Failed to post comment: ${error.message}`);
          }

    - name: 📊 Generate Workflow Summary
      shell: bash
      run: |
        echo "## 🤖 AI Enhanced Analysis Summary" >> $GITHUB_STEP_SUMMARY
        echo "| Metric | Value |" >> $GITHUB_STEP_SUMMARY
        echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
        echo "| Workflow Type | ${{ inputs.workflow-type }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Result File | ${{ inputs.result-file }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Output File | ${{ steps.process-ai-output.outputs.comment-file }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Status | ✅ Completed |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**🛡️ Security Features Active:**" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Input sanitization and validation" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Path traversal prevention" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Output verification" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Error handling and logging" >> $GITHUB_STEP_SUMMARY