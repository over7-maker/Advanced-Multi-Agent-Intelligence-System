name: Comprehensive AI Development

on:
  schedule:
    - cron: '0 2 * * *'  # Run daily at 2 AM
  workflow_dispatch:
  push:
    branches: [main]

jobs:
  ai-development-analysis:
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      issues: write
      pull-requests: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        pip install openai requests python-dotenv
    
    - name: Comprehensive AI Development Analysis
      env:
        DEEPSEEK_API_KEY: ${{ secrets.DEEPSEEK_API_KEY }}
        GLM_API_KEY: ${{ secrets.GLM_API_KEY }}
        GROK_API_KEY: ${{ secrets.GROK_API_KEY }}
        KIMI_API_KEY: ${{ secrets.KIMI_API_KEY }}
        QWEN_API_KEY: ${{ secrets.QWEN_API_KEY }}
        GPTOSS_API_KEY: ${{ secrets.GPTOSS_API_KEY }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        python -c "
        import sys
        sys.path.append('.')
        from ai_service_manager import AIServiceManager
        
        import os
        import requests
        import subprocess
        import json
        from datetime import datetime
        
        # Initialize AI manager
        manager = AIServiceManager()
        
        print('üöÄ Starting Comprehensive AI Development Analysis...')
        
        # 1. Analyze recent commits
        print('üìä Analyzing recent commits...')
        try:
            recent_commits = subprocess.check_output('git log --oneline -10', shell=True, text=True).strip()
            commit_analysis, provider, error = manager.generate_response(
                f'Analyze these recent commits and suggest improvements:\n\n{recent_commits}',
                'You are a software development expert. Analyze commit messages and suggest improvements for code quality, commit message clarity, and development practices.'
            )
            
            if commit_analysis:
                print(f'‚úÖ Commit analysis complete using {provider}')
            else:
                print(f'‚ùå Commit analysis failed: {error}')
        except Exception as e:
            print(f'‚ùå Error analyzing commits: {e}')
        
        # 2. Analyze project structure
        print('üèóÔ∏è Analyzing project structure...')
        try:
            project_structure = subprocess.check_output('find . -type f -name \"*.py\" | head -20', shell=True, text=True).strip()
            structure_analysis, provider, error = manager.generate_response(
                f'Analyze this Python project structure and suggest improvements:\n\n{project_structure}',
                'You are a software architecture expert. Analyze project structure and suggest improvements for organization, modularity, and best practices.'
            )
            
            if structure_analysis:
                print(f'‚úÖ Structure analysis complete using {provider}')
            else:
                print(f'‚ùå Structure analysis failed: {error}')
        except Exception as e:
            print(f'‚ùå Error analyzing structure: {e}')
        
        # 3. Performance analysis of key files
        print('‚ö° Running performance analysis...')
        try:
            # Find main Python files
            main_files = subprocess.check_output('find . -name \"*.py\" -not -path \"./.*\" | head -5', shell=True, text=True).strip().split('\n')
            
            for file_path in main_files:
                if file_path and os.path.exists(file_path):
                    try:
                        with open(file_path, 'r', encoding='utf-8') as f:
                            code_content = f.read()
                        
                        if len(code_content) > 2000:  # Skip very large files
                            continue
                        
                        performance_analysis, provider, error = manager.generate_performance_analysis(code_content)
                        
                        if performance_analysis:
                            print(f'‚úÖ Performance analysis complete for {file_path} using {provider}')
                        else:
                            print(f'‚ùå Performance analysis failed for {file_path}: {error}')
                    except Exception as e:
                        print(f'‚ùå Error analyzing {file_path}: {e}')
        except Exception as e:
            print(f'‚ùå Error in performance analysis: {e}')
        
        # 4. Generate development recommendations
        print('üí° Generating development recommendations...')
        try:
            # Get repository info
            repo_info = f'Repository: ${{ github.repository }}\nBranch: ${{ github.ref_name }}\nEvent: ${{ github.event_name }}'
            
            recommendations, provider, error = manager.generate_response(
                f'Based on this repository information, provide development recommendations:\n\n{repo_info}',
                'You are a senior software engineer and technical lead. Provide actionable recommendations for improving code quality, development workflow, testing, documentation, and project management.'
            )
            
            if recommendations:
                print(f'‚úÖ Recommendations generated using {provider}')
                
                # Create issue with recommendations if it's a scheduled run
                if '${{ github.event_name }}' == 'schedule':
                    issue_url = f'https://api.github.com/repos/${{ github.repository }}/issues'
                    headers = {
                        'Authorization': f'Bearer {os.environ[\"GITHUB_TOKEN\"]}',
                        'Accept': 'application/vnd.github.v3+json'
                    }
                    
                    issue_data = {
                        'title': f'ü§ñ AI Development Recommendations - {datetime.now().strftime(\"%Y-%m-%d\")}',
                        'body': f'## üöÄ AI-Generated Development Recommendations\n\n{recommendations}\n\n---\n*Generated by our multi-API AI system on {datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")}*',
                        'labels': ['ai-generated', 'development', 'recommendations']
                    }
                    
                    try:
                        issue_response = requests.post(issue_url, headers=headers, json=issue_data)
                        if issue_response.status_code == 201:
                            print('‚úÖ Recommendations issue created')
                        else:
                            print(f'‚ùå Failed to create recommendations issue: {issue_response.status_code}')
                    except Exception as e:
                        print(f'‚ùå Error creating recommendations issue: {e}')
            else:
                print(f'‚ùå Recommendations generation failed: {error}')
        except Exception as e:
            print(f'‚ùå Error generating recommendations: {e}')
        
        # 5. Show AI provider statistics
        print('üìä AI Provider Statistics:')
        stats = manager.get_provider_stats()
        for name, stat in stats.items():
            status = '‚úÖ Active' if stat['active'] and stat['has_key'] else '‚ùå Inactive'
            print(f'  {name}: {status} (Success: {stat[\"success_rate\"]})')
        
        print('üéâ Comprehensive AI Development Analysis complete!')
        "
    
    - name: Test All AI Providers
      env:
        DEEPSEEK_API_KEY: ${{ secrets.DEEPSEEK_API_KEY }}
        GLM_API_KEY: ${{ secrets.GLM_API_KEY }}
        GROK_API_KEY: ${{ secrets.GROK_API_KEY }}
        KIMI_API_KEY: ${{ secrets.KIMI_API_KEY }}
        QWEN_API_KEY: ${{ secrets.QWEN_API_KEY }}
        GPTOSS_API_KEY: ${{ secrets.GPTOSS_API_KEY }}
      run: |
        python -c "
        from ai_service_manager import AIServiceManager
        
        print('üß™ Testing all AI providers...')
        manager = AIServiceManager()
        results = manager.test_all_providers()
        
        working_count = sum(1 for result in results.values() if result['success'])
        total_count = len(results)
        
        print(f'üìä Test Results: {working_count}/{total_count} providers working')
        
        for name, result in results.items():
            status = '‚úÖ' if result['success'] else '‚ùå'
            print(f'  {status} {name}: {\"Working\" if result[\"success\"] else \"Failed\"}')
        
        if working_count == 0:
            print('‚ö†Ô∏è No AI providers are working! Please check API keys.')
            exit(1)
        else:
            print(f'üéâ {working_count} AI providers are working!')
        "