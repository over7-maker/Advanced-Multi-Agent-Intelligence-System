name: AI Issue Responder

# Trigger when issues are opened or commented on
on:
  issues:
    types: [opened, edited]
  issue_comment:
    types: [created]
  workflow_dispatch:
    inputs:
      issue_number:
        description: 'Issue number to respond to'
        required: true
        type: string

env:
  PYTHON_VERSION: '3.11'

jobs:
  ai-issue-response:
    runs-on: ubuntu-latest
    
    # Only run on issues, not pull requests
    if: github.event.issue.pull_request == null
    
    permissions:
      issues: write
      contents: read
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install openai requests
    
    - name: AI Issue Analysis and Response
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        DEEPSEEK_API_KEY: ${{ secrets.DEEPSEEK_API_KEY }}
        CLAUDE_API_KEY: ${{ secrets.CLAUDE_API_KEY }}
        GPT4_API_KEY: ${{ secrets.GPT4_API_KEY }}
        GLM_API_KEY: ${{ secrets.GLM_API_KEY }}
        GROK_API_KEY: ${{ secrets.GROK_API_KEY }}
        KIMI_API_KEY: ${{ secrets.KIMI_API_KEY }}
        QWEN_API_KEY: ${{ secrets.QWEN_API_KEY }}
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        GPTOSS_API_KEY: ${{ secrets.GPTOSS_API_KEY }}
        ISSUE_NUMBER: ${{ github.event.issue.number || github.event.inputs.issue_number }}
        ISSUE_TITLE: ${{ github.event.issue.title }}
        ISSUE_BODY: ${{ github.event.issue.body }}
        ISSUE_AUTHOR: ${{ github.event.issue.user.login }}
        REPO_NAME: ${{ github.repository }}
      run: |
        python .github/scripts/ai_issue_responder.py
    
    - name: Add AI Analysis Label
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.addLabels({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
            labels: ['ai-analyzed', 'auto-response']
          });
    
    - name: Generate Response Summary
      run: |
        echo "## ðŸ¤– AI Issue Response Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Issue Number**: ${{ github.event.issue.number }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Issue Title**: ${{ github.event.issue.title }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Issue Author**: ${{ github.event.issue.user.login }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Response Generated**: âœ… Complete" >> $GITHUB_STEP_SUMMARY
        echo "- **AI Providers Used**: DeepSeek, GLM, Grok, Kimi, Qwen, GPT-OSS" >> $GITHUB_STEP_SUMMARY
        echo "- **Fallback System**: âœ… Multi-Provider Fallback Active" >> $GITHUB_STEP_SUMMARY
        echo "- **Status**: âœ… Complete" >> $GITHUB_STEP_SUMMARY