name: AMAS CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 2 * * 1'  # Weekly dependency updates

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '20'

jobs:
  # Dependency Management
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install safety pip-audit bandit
      
      - name: Run Safety scan
        run: |
          python -m safety check --json > safety-report.json || echo "Safety scan completed with warnings"
          python -m safety check || echo "Safety scan completed with warnings"
      
      - name: Run pip-audit scan
        run: |
          python -m pip_audit --format=json > pip-audit-report.json || echo "pip-audit scan completed with warnings"
          python -m pip_audit || echo "pip-audit scan completed with warnings"
      
      - name: Upload security reports
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            safety-report.json
            pip-audit-report.json

  # Code Quality
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
      
      - name: Run Black code formatting check
        run: python -m black --check src/ tests/ --exclude=".*\.skip$"
      
      - name: Run isort import sorting check
        run: python -m isort --check-only src/ tests/ --skip-glob="*.skip"
      
      - name: Run Flake8 linting
        run: python -m flake8 src/ tests/ --exclude="*.skip"
      
      - name: Run MyPy type checking
        run: python -m mypy src/
      
      - name: Run Bandit security linting
        run: python -m bandit -r src/ -f json -o bandit-report.json || echo "Bandit scan completed with warnings"
        continue-on-error: true
      
      - name: Upload code quality reports
        uses: actions/upload-artifact@v4
        with:
          name: code-quality-reports
          path: bandit-report.json

  # Testing
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
        pip install -r requirements-dev.txt
        pip install -r requirements-dev.txt
          pip install -r requirements-dev.txt
      
      - name: Run unit tests
        run: |
          python -m pytest tests/ -m unit
        env:
          ENVIRONMENT: testing
          DATABASE_URL: sqlite:///test.db
          REDIS_URL: redis://localhost:6379/1
          NEO4J_URI: bolt://localhost:7687
          SECRET_KEY: test_secret_key
          JWT_SECRET_KEY: test_jwt_secret_key
      
      - name: Run integration tests
        run: |
          python -m pytest tests/ -m integration
        env:
          ENVIRONMENT: testing
          DATABASE_URL: sqlite:///test.db
          REDIS_URL: redis://localhost:6379/1
          NEO4J_URI: bolt://localhost:7687
          SECRET_KEY: test_secret_key
          JWT_SECRET_KEY: test_jwt_secret_key
      
      - name: Test completed
        run: |
          echo "âœ… All tests completed successfully"

  # Security Testing
  security-test:
    name: Security Testing
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
      
      - name: Run security tests
        run: |
          python -m pytest tests/
        env:
          ENVIRONMENT: testing
          DATABASE_URL: sqlite:///test.db
          REDIS_URL: redis://localhost:6379/1
          NEO4J_URI: bolt://localhost:7687
          SECRET_KEY: test_secret_key
          JWT_SECRET_KEY: test_jwt_secret_key

  # Performance Testing
  performance-test:
    name: Performance Testing
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
      
      - name: Run performance tests
        run: |
          python -m pytest tests/ -m performance --benchmark-only
        env:
          ENVIRONMENT: testing
          DATABASE_URL: sqlite:///test.db
          REDIS_URL: redis://localhost:6379/1
          NEO4J_URI: bolt://localhost:7687
          SECRET_KEY: test_secret_key
          JWT_SECRET_KEY: test_jwt_secret_key

  # Build and Test Docker
  docker-test:
    name: Docker Build Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build Docker image
        run: |
          docker build -t amas:test .
      
      - name: Test Docker image
        run: |
          docker run --rm amas:test python -c "import main; print('Docker image test passed')"

  # Dependency Updates
  dependency-update:
    name: Dependency Update Check
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pip-tools
      
      - name: Check for dependency updates
        run: |
          pip-compile --upgrade requirements.in > requirements-updated.txt
          diff requirements.txt requirements-updated.txt || echo "Dependencies need updating"
      
      - name: Create PR for dependency updates
        if: failure()
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "chore: update dependencies"
          title: "Automated dependency updates"
          body: "This PR contains automated dependency updates."
          branch: dependency-updates

  # Deployment
  deploy:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [dependency-scan, code-quality, test, security-test]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - uses: actions/checkout@v4
      
      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Add actual deployment commands here