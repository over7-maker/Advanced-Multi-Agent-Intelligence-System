name: ü§ñ AMAS AI Agent Comment Listener

on:
  issue_comment:
    types: [created, edited]
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  pull-requests: write
  issues: write

env:
  # 16 AI provider API keys
  CEREBRAS_API_KEY: ${{ secrets.CEREBRAS_API_KEY }}
  CODESTRAL_API_KEY: ${{ secrets.CODESTRAL_API_KEY }}
  DEEPSEEK_API_KEY: ${{ secrets.DEEPSEEK_API_KEY }}
  GEMINIAI_API_KEY: ${{ secrets.GEMINIAI_API_KEY }}
  GLM_API_KEY: ${{ secrets.GLM_API_KEY }}
  GPTOSS_API_KEY: ${{ secrets.GPTOSS_API_KEY }}
  GROK_API_KEY: ${{ secrets.GROK_API_KEY }}
  GROQAI_API_KEY: ${{ secrets.GROQAI_API_KEY }}
  KIMI_API_KEY: ${{ secrets.KIMI_API_KEY }}
  NVIDIA_API_KEY: ${{ secrets.NVIDIA_API_KEY }}
  QWEN_API_KEY: ${{ secrets.QWEN_API_KEY }}
  GEMINI2_API_KEY: ${{ secrets.GEMINI2_API_KEY }}
  GROQ2_API_KEY: ${{ secrets.GROQ2_API_KEY }}
  COHERE_API_KEY: ${{ secrets.COHERE_API_KEY }}
  CHUTES_API_KEY: ${{ secrets.CHUTES_API_KEY }}
  CLAUDE_API_KEY: ${{ secrets.CLAUDE_API_KEY }}
  GPT4_API_KEY: ${{ secrets.GPT4_API_KEY }}

jobs:
  ai_agent_responder:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    if: |
      github.event_name == 'issue_comment' && 
      github.event.issue.pull_request != null &&
      contains(github.event.comment.body, '@amas')
    
    steps:
      - name: üì• Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üêç Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: 'pip'

      - name: üì¶ Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install aiohttp openai cohere python-dotenv
          pip install multidict yarl attrs aiosignal frozenlist

      - name: üîç Parse AI Agent Command
        id: parse_command
        run: |
          echo "üîç Parsing AI agent command..."
          
          # Extract command from comment
          COMMENT_BODY="${{ github.event.comment.body }}"
          echo "Comment: $COMMENT_BODY"
          
          # Extract command after @amas
          COMMAND=$(echo "$COMMENT_BODY" | sed -n 's/.*@amas[[:space:]]*\([^[:space:]]*\).*/\1/p' | tr '[:upper:]' '[:lower:]')
          echo "command=$COMMAND" >> $GITHUB_OUTPUT
          
          # Extract full command text
          FULL_COMMAND=$(echo "$COMMENT_BODY" | sed -n 's/.*@amas[[:space:]]*\(.*\)/\1/p')
          echo "full_command=$FULL_COMMAND" >> $GITHUB_OUTPUT
          
          # Extract PR number
          PR_NUMBER="${{ github.event.issue.number }}"
          echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
          
          # Extract commenter
          COMMENTER="${{ github.event.comment.user.login }}"
          echo "commenter=$COMMENTER" >> $GITHUB_OUTPUT
          
          echo "‚úÖ Command parsed: $COMMAND"

      - name: ü§ñ Run AI Agent Command Processor
        id: ai_processor
        run: |
          echo "ü§ñ Running AI agent command processor..."
          
          python .github/scripts/ai_agent_command_processor.py \
            --command "${{ steps.parse_command.outputs.command }}" \
            --full-command "${{ steps.parse_command.outputs.full_command }}" \
            --pr-number "${{ steps.parse_command.outputs.pr_number }}" \
            --commenter "${{ steps.parse_command.outputs.commenter }}" \
            --output "artifacts/ai_agent_response.json"
          
          if [ $? -eq 0 ]; then
            echo "success=true" >> $GITHUB_OUTPUT
            echo "‚úÖ AI agent command processed successfully"
          else
            echo "success=false" >> $GITHUB_OUTPUT
            echo "‚ùå AI agent command processing failed"
          fi

      - name: üìù Post AI Agent Response
        if: steps.ai_processor.outputs.success == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            try {
              // Read AI agent response
              const responseData = JSON.parse(fs.readFileSync('artifacts/ai_agent_response.json', 'utf8'));
              
              // Generate response comment
              let comment = `## ü§ñ AMAS AI Agent Response
              
              **Command:** \`${{ steps.parse_command.outputs.command }}\`
              **Status:** ${responseData.success ? '‚úÖ Completed' : '‚ùå Failed'}
              **Provider:** ${responseData.metadata?.provider_used || 'Unknown'}
              **Response Time:** ${responseData.metadata?.response_time || 0}s
              
              ---
              
              ### üéØ AI Analysis
              ${responseData.analysis || 'No analysis available'}
              
              ---
              
              ### üí° Recommendations
              ${responseData.recommendations?.map(rec => \`- \${rec}\`).join('\\n') || 'No recommendations available'}
              
              ---
              
              ### üöÄ Actions Taken
              ${responseData.actions_taken?.map(action => \`- \${action}\`).join('\\n') || 'No actions taken'}
              
              ---
              
              *ü§ñ Generated by AMAS AI Agent at ${new Date().toISOString()}*
              *Advanced Multi-Agent Intelligence System v3.0*
              `;
              
              // Post response comment
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
              
              console.log('‚úÖ AI agent response posted successfully');
            } catch (error) {
              console.error('‚ùå Failed to post AI agent response:', error);
              
              // Post error comment
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `## ü§ñ AMAS AI Agent Error
                
                **Command:** \`${{ steps.parse_command.outputs.command }}\`
                **Status:** ‚ùå Failed
                **Error:** ${error.message}
                
                ---
                
                *Please try again or contact the development team.*
                `
              });
            }

      - name: üìä Generate Workflow Summary
        run: |
          echo "## ü§ñ AMAS AI Agent Comment Listener" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Metric | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Command | ${{ steps.parse_command.outputs.command }} |" >> $GITHUB_STEP_SUMMARY
          echo "| PR Number | ${{ steps.parse_command.outputs.pr_number }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Commenter | ${{ steps.parse_command.outputs.commenter }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Processing | ${{ steps.ai_processor.outputs.success }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**ü§ñ AMAS AI Agent is ready to help with any task!**" >> $GITHUB_STEP_SUMMARY

  pr_auto_analysis:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    if: github.event_name == 'pull_request'
    
    steps:
      - name: üì• Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üêç Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: üì¶ Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install aiohttp openai cohere python-dotenv anthropic google-generativeai groq mistralai
          pip install multidict yarl attrs aiosignal frozenlist

      - name: üîç Check AI Provider Availability
        shell: bash
        run: |
          set +e  # CRITICAL: do not exit on non-zero tests
          echo "üîç Checking AI provider availability..."
          available_providers=0

          check_key() {
            local name="$1"
            local value="${!name}"
            if [ -n "$value" ] && [ ${#value} -gt 10 ]; then
              echo "‚úÖ $name: Available (${#value} chars)"
              # SAFE increment - no arithmetic expansion under -e
              available_providers=$(($available_providers + 1))
            else
              echo "‚ÑπÔ∏è $name: Not set or too short"
            fi
          }

          echo "üîé Checking all supported providers..."
          check_key "DEEPSEEK_API_KEY"
          check_key "CEREBRAS_API_KEY"
          check_key "NVIDIA_API_KEY"
          check_key "CODESTRAL_API_KEY"
          check_key "GLM_API_KEY"
          check_key "GROK_API_KEY"
          check_key "COHERE_API_KEY"
          check_key "CLAUDE_API_KEY"
          check_key "GPT4_API_KEY"
          check_key "GEMINI_API_KEY"
          check_key "GROQAI_API_KEY"
          check_key "MISTRAL_API_KEY"
          check_key "KIMI_API_KEY"
          check_key "QWEN_API_KEY"
          check_key "GPTOSS_API_KEY"
          check_key "GEMINIAI_API_KEY"
          check_key "GEMINI2_API_KEY"
          check_key "GROQ2_API_KEY"
          check_key "CHUTES_API_KEY"

          echo ""
          echo "üìä PROVIDER AVAILABILITY SUMMARY:"
          echo "  Available: $available_providers/19 providers"
          echo ""

          if [ "$available_providers" -eq 0 ]; then
            echo "üö® CRITICAL: NO REAL AI PROVIDERS AVAILABLE!"
            echo "‚ùå Please add at least one valid API key to repository secrets:"
            echo "   - DEEPSEEK_API_KEY (recommended - free tier available)"
            echo "   - NVIDIA_API_KEY (high performance)"
            echo "   - CEREBRAS_API_KEY (fast inference)"
            echo "   - CODESTRAL_API_KEY (code specialist)"
            echo "   - COHERE_API_KEY, CLAUDE_API_KEY, GPT4_API_KEY"
            echo ""
            echo "üîó Get free API keys:"
            echo "   - DeepSeek: https://platform.deepseek.com"
            echo "   - Cerebras: https://cloud.cerebras.ai"
            echo "   - OpenRouter: https://openrouter.ai (supports multiple models)"
            set -e  # re-enable for final exit
            exit 1
          else
            echo "‚úÖ Real AI providers available ($available_providers) - proceeding with analysis"
            # Export for next steps
            echo "AVAILABLE_PROVIDERS=$available_providers" >> $GITHUB_ENV
            set -e  # re-enable for remaining steps
          fi

      - name: ü§ñ Run BULLETPROOF PR Analysis
        run: |
          echo "üöÄ Running BULLETPROOF PR analysis..."
          echo "üìä Using $AVAILABLE_PROVIDERS real AI providers"
          
          # Ensure artifacts directory exists
          mkdir -p artifacts
          
          # Run BULLETPROOF real AI analysis
          python .github/scripts/comprehensive_pr_analyzer_bulletproof.py \
            --pr-number "${{ github.event.number }}" \
            --output "artifacts/auto_pr_analysis.json"
          
          # Verify analysis file was created
          if [ ! -f "artifacts/auto_pr_analysis.json" ]; then
            echo "üö® NO ANALYSIS RESULTS FILE CREATED!"
            echo "üìÅ Available files in artifacts/:"
            ls -la artifacts/ || echo "No artifacts directory"
            exit 1
          fi
          
          echo "üìÑ Analysis file created successfully"
          
          # CRITICAL: Validate bulletproof real AI was used
          if grep -q '"bulletproof_validated": true' artifacts/auto_pr_analysis.json; then
            echo "‚úÖ BULLETPROOF REAL AI VERIFIED!"
            echo "ü§ñ Provider used: $(grep -o '"provider": "[^"]*"' artifacts/auto_pr_analysis.json | head -1 | cut -d'"' -f4)"
            echo "‚è±Ô∏è Response time: $(grep -o '"response_time": [0-9.]*' artifacts/auto_pr_analysis.json | head -1 | cut -d':' -f2 | tr -d ' ')s"
            echo "üéâ Analysis completed with real AI provider"
          else
            echo "üö® BULLETPROOF VALIDATION FAILED!"
            echo "üìã Analysis file content (first 500 chars):"
            head -c 500 artifacts/auto_pr_analysis.json
            echo ""
            echo "üîç Full file content:"
            cat artifacts/auto_pr_analysis.json
            exit 1
          fi

      - name: üìù Post Welcome Message
        if: github.event.action == 'opened'
        uses: actions/github-script@v7
        with:
          script: |
            const welcomeComment = `## ü§ñ AMAS AI Agent Ready!
            
            Hello @${{ github.event.pull_request.user.login }}, I'm your AMAS AI Agent! üöÄ
            
            I can help you with this pull request in many ways. Just mention me in a comment:
            
            ### üéØ Available Commands:
            - \`@amas analyze\` - Comprehensive code analysis
            - \`@amas fix\` - Fix issues automatically
            - \`@amas security\` - Security audit and fixes
            - \`@amas build\` - Build optimization
            - \`@amas docs\` - Generate documentation
            - \`@amas test\` - Run comprehensive tests
            - \`@amas deploy\` - Deployment assistance
            - \`@amas help\` - Show all available commands
            
            ### üöÄ AI Capabilities:
            - **19-Provider Fallback**: Maximum reliability
            - **Bulletproof Validation**: Only real AI responses
            - **Intelligent Analysis**: Advanced pattern recognition
            - **Automated Fixes**: Self-healing capabilities
            - **Continuous Learning**: Improves over time
            
            ---
            
            *ü§ñ AMAS AI Agent - Advanced Multi-Agent Intelligence System v3.0*
            *üõ°Ô∏è Protected by BULLETPROOF AI Detection System*
            `;
            
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: welcomeComment
            });

      - name: üìù Post Auto Analysis
        if: github.event.action != 'opened'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            try {
              const analysisData = JSON.parse(fs.readFileSync('artifacts/auto_pr_analysis.json', 'utf8'));
              
              // Check if bulletproof validated
              if (analysisData.metadata?.bulletproof_validated === true) {
                const analysisComment = `## ü§ñ BULLETPROOF REAL AI Analysis
                
                **Status:** ‚úÖ REAL AI Verified
                **Provider:** ${analysisData.ai_analysis?.provider || 'Unknown'} (CONFIRMED REAL API CALL)
                **Response Time:** ${analysisData.ai_analysis?.response_time || 0}s (Actual API Response)
                **Validation:** Bulletproof validated ‚úì
                
                ---
                
                ### üîç REAL AI Analysis Results
                ${analysisData.ai_analysis?.analysis || 'No analysis available'}
                
                ---
                
                ### üí° AI Recommendations
                ${analysisData.recommendations?.map(rec => \`- \${rec}\`).join('\\n') || 'No recommendations available'}
                
                ---
                
                ### üìä Verification Proof
                - **Real AI Verified:** ‚úÖ ${analysisData.ai_analysis?.real_ai_verified || false}
                - **Fake AI Detected:** ‚ùå ${analysisData.ai_analysis?.fake_ai_detected || false}
                - **Bulletproof Validated:** ‚úÖ ${analysisData.metadata?.bulletproof_validated || false}
                - **Provider Attempt:** ${analysisData.ai_analysis?.provider_attempt}/${analysisData.ai_analysis?.total_attempts}
                
                ---
                
                *ü§ñ GUARANTEED REAL AI - Provider: ${analysisData.ai_analysis?.provider || 'Unknown'}*
                *This is NOT a template - Actual AI API call performed*
                *üõ°Ô∏è Protected by BULLETPROOF AI Detection System*
                `;
                
                await github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: analysisComment
                });
                
                console.log('‚úÖ BULLETPROOF real AI analysis posted successfully');
              } else {
                // Bulletproof validation failed - post enforcement message
                const enforcementComment = `## üö® BULLETPROOF AI ENFORCEMENT ACTIVE
                
                **Status:** ‚ùå FAKE AI GENERATION BLOCKED
                **Protection:** BULLETPROOF validation system
                
                ### üõ°Ô∏è Why This Message Appears
                The BULLETPROOF AI system has **refused to generate fake AI responses**.
                This protects users from misleading template content.
                
                ### üîß Resolution Required
                - **Check API key configuration** for real AI providers
                - **Verify provider availability** (network/quotas)  
                - **Ensure bulletproof validation** passes
                
                ### üìä Detection Details
                - **Provider:** ${analysisData.ai_analysis?.provider || 'Unknown'}
                - **Response Time:** ${analysisData.ai_analysis?.response_time || 0}s
                - **Real AI Verified:** ‚ùå ${analysisData.ai_analysis?.real_ai_verified || false}
                - **Bulletproof Validated:** ‚ùå ${analysisData.metadata?.bulletproof_validated || false}
                
                ---
                
                ### ‚ö° Quick Fix
                Add at least one of these API keys to repository secrets:
                - **DEEPSEEK_API_KEY** (recommended - free tier)
                - **NVIDIA_API_KEY** (high performance)
                - **CEREBRAS_API_KEY** (fast inference)
                - **CODESTRAL_API_KEY** (code specialist)
                - **COHERE_API_KEY, CLAUDE_API_KEY, GPT4_API_KEY**
                
                ### üîó Get API Keys:
                - DeepSeek: https://platform.deepseek.com
                - Cerebras: https://cloud.cerebras.ai
                - OpenRouter: https://openrouter.ai (supports multiple models)
                
                ---
                
                *üö® No fake AI responses allowed*
                *üõ°Ô∏è BULLETPROOF validation protects against template content*
                `;
                
                await github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: enforcementComment
                });
                
                console.log('üö® Bulletproof enforcement message posted');
              }
            } catch (error) {
              console.log('Auto analysis file not found or invalid:', error.message);
              
              // Post analysis unavailable message
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `## üö® BULLETPROOF AI Analysis Unavailable
                
                **Status:** ‚ùå Analysis Failed
                **Reason:** ${error.message}
                
                ### üîß Resolution Required
                - Check workflow logs for detailed error information
                - Verify bulletproof AI system configuration
                - Ensure API keys are properly configured
                
                ---
                
                *üõ°Ô∏è Protected by BULLETPROOF AI Detection System*
                *No fake responses generated when analysis fails*
                `
              });
              
              console.log('‚ö†Ô∏è Analysis unavailable message posted');
            }