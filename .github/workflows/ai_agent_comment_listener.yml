name: ü§ñ AMAS AI Agent Comment Listener

on:
  issue_comment:
    types: [created, edited]
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  pull-requests: write
  issues: write

env:
  # 16 AI provider API keys
  CEREBRAS_API_KEY: ${{ secrets.CEREBRAS_API_KEY }}
  CODESTRAL_API_KEY: ${{ secrets.CODESTRAL_API_KEY }}
  DEEPSEEK_API_KEY: ${{ secrets.DEEPSEEK_API_KEY }}
  GEMINIAI_API_KEY: ${{ secrets.GEMINIAI_API_KEY }}
  GLM_API_KEY: ${{ secrets.GLM_API_KEY }}
  GPTOSS_API_KEY: ${{ secrets.GPTOSS_API_KEY }}
  GROK_API_KEY: ${{ secrets.GROK_API_KEY }}
  GROQAI_API_KEY: ${{ secrets.GROQAI_API_KEY }}
  KIMI_API_KEY: ${{ secrets.KIMI_API_KEY }}
  NVIDIA_API_KEY: ${{ secrets.NVIDIA_API_KEY }}
  QWEN_API_KEY: ${{ secrets.QWEN_API_KEY }}
  GEMINI2_API_KEY: ${{ secrets.GEMINI2_API_KEY }}
  GROQ2_API_KEY: ${{ secrets.GROQ2_API_KEY }}
  COHERE_API_KEY: ${{ secrets.COHERE_API_KEY }}
  CHUTES_API_KEY: ${{ secrets.CHUTES_API_KEY }}
  CLAUDE_API_KEY: ${{ secrets.CLAUDE_API_KEY }}
  GPT4_API_KEY: ${{ secrets.GPT4_API_KEY }}

jobs:
  ai_agent_responder:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    if: |
      github.event_name == 'issue_comment' && 
      github.event.issue.pull_request != null &&
      contains(github.event.comment.body, '@amas')
    
    steps:
      - name: üì• Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üêç Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: 'pip'

      - name: üì¶ Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install aiohttp openai cohere python-dotenv
          pip install multidict yarl attrs aiosignal frozenlist

      - name: üîç Parse AI Agent Command
        id: parse_command
        run: |
          echo "üîç Parsing AI agent command..."
          
          # Extract command from comment
          COMMENT_BODY="${{ github.event.comment.body }}"
          echo "Comment: $COMMENT_BODY"
          
          # Extract command after @amas
          COMMAND=$(echo "$COMMENT_BODY" | sed -n 's/.*@amas[[:space:]]*\([^[:space:]]*\).*/\1/p' | tr '[:upper:]' '[:lower:]')
          echo "command=$COMMAND" >> $GITHUB_OUTPUT
          
          # Extract full command text
          FULL_COMMAND=$(echo "$COMMENT_BODY" | sed -n 's/.*@amas[[:space:]]*\(.*\)/\1/p')
          echo "full_command=$FULL_COMMAND" >> $GITHUB_OUTPUT
          
          # Extract PR number
          PR_NUMBER="${{ github.event.issue.number }}"
          echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
          
          # Extract commenter
          COMMENTER="${{ github.event.comment.user.login }}"
          echo "commenter=$COMMENTER" >> $GITHUB_OUTPUT
          
          echo "‚úÖ Command parsed: $COMMAND"

      - name: ü§ñ Run AI Agent Command Processor
        id: ai_processor
        run: |
          echo "ü§ñ Running AI agent command processor..."
          
          python .github/scripts/ai_agent_command_processor.py \
            --command "${{ steps.parse_command.outputs.command }}" \
            --full-command "${{ steps.parse_command.outputs.full_command }}" \
            --pr-number "${{ steps.parse_command.outputs.pr_number }}" \
            --commenter "${{ steps.parse_command.outputs.commenter }}" \
            --output "artifacts/ai_agent_response.json"
          
          if [ $? -eq 0 ]; then
            echo "success=true" >> $GITHUB_OUTPUT
            echo "‚úÖ AI agent command processed successfully"
          else
            echo "success=false" >> $GITHUB_OUTPUT
            echo "‚ùå AI agent command processing failed"
          fi

      - name: üìù Post AI Agent Response
        if: steps.ai_processor.outputs.success == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            try {
              // Read AI agent response
              const responseData = JSON.parse(fs.readFileSync('artifacts/ai_agent_response.json', 'utf8'));
              
              // Generate response comment
              let comment = `## ü§ñ AMAS AI Agent Response
              
              **Command:** \`${{ steps.parse_command.outputs.command }}\`
              **Status:** ${responseData.success ? '‚úÖ Completed' : '‚ùå Failed'}
              **Provider:** ${responseData.metadata?.provider_used || 'Unknown'}
              **Response Time:** ${responseData.metadata?.response_time || 0}s
              
              ---
              
              ### üéØ AI Analysis
              ${responseData.analysis || 'No analysis available'}
              
              ---
              
              ### üí° Recommendations
              ${responseData.recommendations?.map(rec => `- ${rec}`).join('\n') || 'No recommendations available'}
              
              ---
              
              ### üöÄ Actions Taken
              ${responseData.actions_taken?.map(action => `- ${action}`).join('\n') || 'No actions taken'}
              
              ---
              
              *ü§ñ Generated by AMAS AI Agent at ${new Date().toISOString()}*
              *Advanced Multi-Agent Intelligence System v3.0*
              `;
              
              // Post response comment
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
              
              console.log('‚úÖ AI agent response posted successfully');
            } catch (error) {
              console.error('‚ùå Failed to post AI agent response:', error);
              
              // Post error comment
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `## ü§ñ AMAS AI Agent Error
                
                **Command:** \`${{ steps.parse_command.outputs.command }}\`
                **Status:** ‚ùå Failed
                **Error:** ${error.message}
                
                ---
                
                *Please try again or contact the development team.*
                `
              });
            }

      - name: üìä Generate Workflow Summary
        run: |
          echo "## ü§ñ AMAS AI Agent Comment Listener" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Metric | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Command | ${{ steps.parse_command.outputs.command }} |" >> $GITHUB_STEP_SUMMARY
          echo "| PR Number | ${{ steps.parse_command.outputs.pr_number }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Commenter | ${{ steps.parse_command.outputs.commenter }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Processing | ${{ steps.ai_processor.outputs.success }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**ü§ñ AMAS AI Agent is ready to help with any task!**" >> $GITHUB_STEP_SUMMARY

  pr_auto_analysis:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    if: github.event_name == 'pull_request'
    
    steps:
      - name: üì• Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üêç Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: üì¶ Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install aiohttp openai cohere python-dotenv

      - name: üîç Check AI Provider Availability
        run: |
          echo "üîç Checking AI provider availability..."
          
          # Count available providers
          available_providers=0
          
          if [ -n "$DEEPSEEK_API_KEY" ] && [ ${#DEEPSEEK_API_KEY} -gt 10 ]; then
            echo "‚úÖ DEEPSEEK_API_KEY: Available (${#DEEPSEEK_API_KEY} chars)"
            ((available_providers++))
          else
            echo "‚ùå DEEPSEEK_API_KEY: Missing or invalid"
          fi
          
          if [ -n "$NVIDIA_API_KEY" ] && [ ${#NVIDIA_API_KEY} -gt 10 ]; then
            echo "‚úÖ NVIDIA_API_KEY: Available (${#NVIDIA_API_KEY} chars)"
            ((available_providers++))
          else
            echo "‚ùå NVIDIA_API_KEY: Missing or invalid"
          fi
          
          if [ -n "$CEREBRAS_API_KEY" ] && [ ${#CEREBRAS_API_KEY} -gt 10 ]; then
            echo "‚úÖ CEREBRAS_API_KEY: Available (${#CEREBRAS_API_KEY} chars)"
            ((available_providers++))
          else
            echo "‚ùå CEREBRAS_API_KEY: Missing or invalid"
          fi
          
          if [ -n "$CODESTRAL_API_KEY" ] && [ ${#CODESTRAL_API_KEY} -gt 10 ]; then
            echo "‚úÖ CODESTRAL_API_KEY: Available (${#CODESTRAL_API_KEY} chars)"
            ((available_providers++))
          else
            echo "‚ùå CODESTRAL_API_KEY: Missing or invalid"
          fi
          
          if [ -n "$COHERE_API_KEY" ] && [ ${#COHERE_API_KEY} -gt 10 ]; then
            echo "‚úÖ COHERE_API_KEY: Available (${#COHERE_API_KEY} chars)"
            ((available_providers++))
          else
            echo "‚ùå COHERE_API_KEY: Missing or invalid"
          fi
          
          echo "üìä Total available providers: $available_providers/16"
          
          if [ $available_providers -eq 0 ]; then
            echo "üö® CRITICAL: NO REAL AI PROVIDERS AVAILABLE!"
            echo "‚ùå Please add at least one valid API key to repository secrets:"
            echo "   - DEEPSEEK_API_KEY"
            echo "   - NVIDIA_API_KEY" 
            echo "   - CEREBRAS_API_KEY"
            echo "   - CODESTRAL_API_KEY"
            echo "   - COHERE_API_KEY"
            echo "   - Or any other supported provider"
            exit 1
          else
            echo "‚úÖ Real AI providers available - proceeding with analysis"
          fi

      - name: ü§ñ Run BULLETPROOF PR Analysis
        run: |
          echo "üöÄ Running BULLETPROOF PR analysis..."
          
          # Install ALL dependencies for bulletproof AI
          pip install -q aiohttp openai anthropic google-generativeai groq cohere
          pip install -q multidict yarl attrs aiosignal frozenlist
          
          # Run BULLETPROOF real AI analysis
          python .github/scripts/comprehensive_pr_analyzer_bulletproof.py \
            --pr-number "${{ github.event.number }}" \
            --output "artifacts/auto_pr_analysis.json"
          
          # CRITICAL: Validate bulletproof real AI was used
          if grep -q '"bulletproof_validated": true' artifacts/auto_pr_analysis.json; then
            echo "‚úÖ BULLETPROOF REAL AI VERIFIED!"
            echo "ü§ñ Provider used: $(grep -o '"provider": "[^"]*"' artifacts/auto_pr_analysis.json | head -1)"
            echo "‚è±Ô∏è Response time: $(grep -o '"response_time": [0-9.]*' artifacts/auto_pr_analysis.json | head -1)"
          else
            echo "üö® FAKE AI DETECTED - FAILING HARD!"
            echo "üìÑ Analysis file contents:"
            cat artifacts/auto_pr_analysis.json || echo "No analysis file found"
            exit 1
          fi

      - name: üìù Post Welcome Message
        if: github.event.action == 'opened'
        uses: actions/github-script@v7
        with:
          script: |
            const welcomeComment = `## ü§ñ AMAS AI Agent Ready!
            
            Hello @${{ github.event.pull_request.user.login }}, I'm your AMAS AI Agent! üöÄ
            
            I can help you with this pull request in many ways. Just mention me in a comment:
            
            ### üéØ Available Commands:
            - \`@amas analyze\` - Comprehensive code analysis
            - \`@amas fix\` - Fix issues automatically
            - \`@amas security\` - Security audit and fixes
            - \`@amas build\` - Build optimization
            - \`@amas docs\` - Generate documentation
            - \`@amas test\` - Run comprehensive tests
            - \`@amas deploy\` - Deployment assistance
            - \`@amas help\` - Show all available commands
            
            ### üöÄ AI Capabilities:
            - **16-Provider Fallback**: Maximum reliability
            - **Intelligent Analysis**: Advanced pattern recognition
            - **Automated Fixes**: Self-healing capabilities
            - **Continuous Learning**: Improves over time
            
            ---
            
            *ü§ñ AMAS AI Agent - Advanced Multi-Agent Intelligence System v3.0*
            `;
            
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: welcomeComment
            });

      - name: üìù Post Auto Analysis
        if: github.event.action != 'opened'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            try {
              const analysisData = JSON.parse(fs.readFileSync('artifacts/auto_pr_analysis.json', 'utf8'));
              
              const analysisComment = `## ü§ñ AMAS AI Agent - Auto Analysis
              
              **Status:** ${analysisData.success ? '‚úÖ Completed' : '‚ùå Failed'}
              **Provider:** ${analysisData.metadata?.provider_used || 'Unknown'}
              **Response Time:** ${analysisData.metadata?.response_time || 0}s
              
              ---
              
              ### üìä Analysis Summary
              ${analysisData.analysis || 'No analysis available'}
              
              ---
              
              ### üí° Recommendations
              ${analysisData.recommendations?.map(rec => `- ${rec}`).join('\n') || 'No recommendations available'}
              
              ---
              
              *ü§ñ Generated by AMAS AI Agent at ${new Date().toISOString()}*
              `;
              
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: analysisComment
              });
            } catch (error) {
              console.log('Auto analysis not available or failed');
            }