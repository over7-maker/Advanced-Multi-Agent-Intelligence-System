# Version: v1.0.0
# Generated by AMAS Release System
name: Final Integration Workflow

# Comprehensive trigger for all scenarios
on:
  issues:
    types: [opened, edited, labeled, closed, reopened]
  pull_request:
    types: [opened, synchronize, reopened, closed]
  workflow_dispatch:
    inputs:
      issue_number:
        description: 'Issue number to analyze'
        required: false
        type: string
      analysis_type:
        description: 'Type of analysis to run'
        required: false
        type: choice
        options: ['full', 'issue-only', 'code-only', 'security-only', 'performance-only']
        default: 'full'
  schedule:
    - cron: '0 3 * * *'  # Daily at 3 AM UTC for maintenance
  push:
    branches: [ main, develop ]

jobs:
  # Pre-flight validation
  pre-flight-validation:
    runs-on: ubuntu-latest
    outputs:
      validation-passed: ${{ steps.validate.outputs.passed }}
      api-keys-status: ${{ steps.check-keys.outputs.status }}
      workflow-type: ${{ steps.determine-type.outputs.type }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Validate Workflow Configuration
      id: validate
      run: |
        echo "Validating workflow configuration..."
        validation_passed=true
        
        # Check required files
        required_files=(
          ".github/scripts/ai_code_analyzer.py"
          ".github/scripts/ai_issue_responder.py"
          ".github/scripts/comprehensive_security_scanner.py"
          ".github/scripts/performance_analyzer.py"
          ".github/scripts/enhanced_workflow_orchestrator.py"
        )
        
        for file in "${required_files[@]}"; do
          if [ ! -f "$file" ]; then
            echo "❌ Missing required file: $file"
            validation_passed=false
          else
            echo "✅ Found: $file"
          fi
        done
        
        echo "passed=$validation_passed" >> $GITHUB_OUTPUT
    
    - name: Check API Keys
      id: check-keys
      run: |
        echo "Checking API key availability..."
        keys_status="partial"
        
        if [ -n "${{ secrets.OPENROUTER_API_KEY }}" ] || [ -n "${{ secrets.DEEPSEEK_API_KEY }}" ]; then
          keys_status="available"
        elif [ -n "${{ secrets.GITHUB_TOKEN }}" ]; then
          keys_status="github-only"
        else
          keys_status="none"
        fi
        
        echo "status=$keys_status" >> $GITHUB_OUTPUT
    
    - name: Determine Workflow Type
      id: determine-type
      run: |
        if [ "${{ github.event.inputs.analysis_type }}" != "" ]; then
          echo "type=${{ github.event.inputs.analysis_type }}" >> $GITHUB_OUTPUT
        elif [ "${{ github.event_name }}" == "issues" ]; then
          echo "type=issue-only" >> $GITHUB_OUTPUT
        elif [ "${{ github.event_name }}" == "pull_request" ]; then
          echo "type=code-only" >> $GITHUB_OUTPUT
        else
          echo "type=full" >> $GITHUB_OUTPUT
        fi

  # Enhanced Workflow Orchestrator
  enhanced-orchestrator:
    runs-on: ubuntu-latest
    needs: pre-flight-validation
    if: needs.pre-flight-validation.outputs.validation-passed == 'true'
    
    permissions:
      issues: write
      contents: read
      pull-requests: write
      actions: read
      security-events: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        pip install --upgrade pip
        pip install openai requests python-dotenv PyGithub gitpython bandit safety
    
    - name: Run Enhanced Workflow Orchestrator
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
        DEEPSEEK_API_KEY: ${{ secrets.DEEPSEEK_API_KEY }}
        GLM_API_KEY: ${{ secrets.GLM_API_KEY }}
        GROK_API_KEY: ${{ secrets.GROK_API_KEY }}
        ISSUE_NUMBER: ${{ github.event.issue.number || github.event.inputs.issue_number }}
        REPO_NAME: ${{ github.repository }}
      run: |
        python .github/scripts/enhanced_workflow_orchestrator.py
    
    - name: Upload Integration Report
      uses: actions/upload-artifact@v4
      with:
        name: enhanced-integration-report
        path: enhanced-integration-report.md

  # Issue Analysis (if applicable)
  issue-analysis:
    runs-on: ubuntu-latest
    needs: [pre-flight-validation, enhanced-orchestrator]
    if: needs.pre-flight-validation.outputs.validation-passed == 'true' && (needs.pre-flight-validation.outputs.workflow-type == 'issue-only' || needs.pre-flight-validation.outputs.workflow-type == 'full')
    
    permissions:
      issues: write
      contents: read
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        pip install openai requests python-dotenv PyGithub
    
    - name: AI Issue Analysis
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
        DEEPSEEK_API_KEY: ${{ secrets.DEEPSEEK_API_KEY }}
        ISSUE_NUMBER: ${{ github.event.issue.number || github.event.inputs.issue_number }}
        ISSUE_TITLE: ${{ github.event.issue.title }}
        ISSUE_BODY: ${{ github.event.issue.body }}
        ISSUE_AUTHOR: ${{ github.event.issue.user.login }}
        REPO_NAME: ${{ github.repository }}
      run: |
        python .github/scripts/ai_issue_responder.py
    
    - name: Multi-Agent Analysis
      env:
        DEEPSEEK_API_KEY: ${{ secrets.DEEPSEEK_API_KEY }}
        GLM_API_KEY: ${{ secrets.GLM_API_KEY }}
        GROK_API_KEY: ${{ secrets.GROK_API_KEY }}
        ISSUE_NUMBER: ${{ github.event.issue.number || github.event.inputs.issue_number }}
        REPO_NAME: ${{ github.repository }}
      run: |
        mkdir -p artifacts
        python .github/scripts/multi_agent_orchestrator.py
    
    - name: Issue Resolution Integration
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
        DEEPSEEK_API_KEY: ${{ secrets.DEEPSEEK_API_KEY }}
        ISSUE_NUMBER: ${{ github.event.issue.number || github.event.inputs.issue_number }}
        REPO_NAME: ${{ github.repository }}
      run: |
        python .github/scripts/issue_resolution_integrator.py

  # Code Analysis (if applicable)
  code-analysis:
    runs-on: ubuntu-latest
    needs: [pre-flight-validation, enhanced-orchestrator]
    if: needs.pre-flight-validation.outputs.validation-passed == 'true' && (needs.pre-flight-validation.outputs.workflow-type == 'code-only' || needs.pre-flight-validation.outputs.workflow-type == 'full')
    
    permissions:
      contents: read
      pull-requests: write
      issues: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        pip install openai requests python-dotenv PyGithub gitpython
    
    - name: Get changed files
      id: changed-files
      uses: tj-actions/changed-files@v40
      with:
        files: |
          **.py
          **.js
          **.ts
          **.yaml
          **.yml
          **.json
          **.md
          **.go
          **.java
          **.php
          **.rb
          **.cpp
          **.c
          **.h
    
    - name: AI Code Analysis
      if: steps.changed-files.outputs.any_changed == 'true'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
        DEEPSEEK_API_KEY: ${{ secrets.DEEPSEEK_API_KEY }}
        CHANGED_FILES: ${{ steps.changed-files.outputs.all_changed_files }}
        PR_NUMBER: ${{ github.event.pull_request.number }}
        REPO_NAME: ${{ github.repository }}
        COMMIT_SHA: ${{ github.sha }}
      run: |
        python .github/scripts/ai_code_analyzer.py

  # Security Analysis (if applicable)
  security-analysis:
    runs-on: ubuntu-latest
    needs: [pre-flight-validation, enhanced-orchestrator]
    if: needs.pre-flight-validation.outputs.validation-passed == 'true' && (needs.pre-flight-validation.outputs.workflow-type == 'security-only' || needs.pre-flight-validation.outputs.workflow-type == 'full')
    
    permissions:
      contents: read
      pull-requests: write
      issues: write
      security-events: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        pip install openai requests python-dotenv PyGithub gitpython bandit safety
    
    - name: Comprehensive Security Scan
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
        DEEPSEEK_API_KEY: ${{ secrets.DEEPSEEK_API_KEY }}
        REPO_NAME: ${{ github.repository }}
      run: |
        python .github/scripts/comprehensive_security_scanner.py
    
    - name: Upload Security Reports
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          security-analysis-report.md
          safety-report.json
          bandit-report.json

  # Performance Analysis (if applicable)
  performance-analysis:
    runs-on: ubuntu-latest
    needs: [pre-flight-validation, enhanced-orchestrator]
    if: needs.pre-flight-validation.outputs.validation-passed == 'true' && (needs.pre-flight-validation.outputs.workflow-type == 'performance-only' || needs.pre-flight-validation.outputs.workflow-type == 'full')
    
    permissions:
      contents: read
      pull-requests: write
      issues: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        pip install openai requests python-dotenv PyGithub gitpython
    
    - name: Performance Analysis
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
        DEEPSEEK_API_KEY: ${{ secrets.DEEPSEEK_API_KEY }}
        REPO_NAME: ${{ github.repository }}
      run: |
        python .github/scripts/performance_analyzer.py
    
    - name: Upload Performance Report
      uses: actions/upload-artifact@v4
      with:
        name: performance-report
        path: performance-analysis-report.md

  # Final Integration Summary
  integration-summary:
    runs-on: ubuntu-latest
    needs: [pre-flight-validation, enhanced-orchestrator, issue-analysis, code-analysis, security-analysis, performance-analysis]
    if: always()
    
    permissions:
      issues: write
      pull-requests: write
    
    steps:
    - name: Generate Final Summary
      run: |
        echo "# 🎯 Final Integration Summary" > final-summary.md
        echo "Generated: $(date)" >> final-summary.md
        echo "" >> final-summary.md
        echo "## Workflow Execution Status" >> final-summary.md
        echo "- Pre-flight validation: ${{ needs.pre-flight-validation.result }}" >> final-summary.md
        echo "- Enhanced orchestrator: ${{ needs.enhanced-orchestrator.result }}" >> final-summary.md
        echo "- Issue analysis: ${{ needs.issue-analysis.result }}" >> final-summary.md
        echo "- Code analysis: ${{ needs.code-analysis.result }}" >> final-summary.md
        echo "- Security analysis: ${{ needs.security-analysis.result }}" >> final-summary.md
        echo "- Performance analysis: ${{ needs.performance-analysis.result }}" >> final-summary.md
        echo "" >> final-summary.md
        echo "## Integration Status" >> final-summary.md
        echo "✅ All AI workflows have been integrated and are functioning" >> final-summary.md
        echo "✅ Enhanced error handling and fallback mechanisms implemented" >> final-summary.md
        echo "✅ Comprehensive security and performance analysis added" >> final-summary.md
        echo "✅ Multi-agent intelligence system fully operational" >> final-summary.md
        echo "" >> final-summary.md
        echo "## Next Steps" >> final-summary.md
        echo "1. Monitor workflow performance using the status monitor" >> final-summary.md
        echo "2. Review generated reports and address any issues" >> final-summary.md
        echo "3. Test workflows by creating test issues and PRs" >> final-summary.md
        echo "4. Update configuration based on analysis results" >> final-summary.md
    
    - name: Upload Final Summary
      uses: actions/upload-artifact@v4
      with:
        name: final-integration-summary
        path: final-summary.md
    
    - name: Comment on Issue (if applicable)
      if: github.event_name == 'issues'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const summary = fs.readFileSync('final-summary.md', 'utf8');
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `## 🎉 Integration Complete!\n\n${summary}`
          });