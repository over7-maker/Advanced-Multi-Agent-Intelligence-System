name: AI-Enhanced Development Workflow

# Comprehensive AI-powered development workflow
on:
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches: [ main, develop ]
  issues:
    types: [opened, edited]
  issue_comment:
    types: [created]
  workflow_dispatch:  # Manual trigger
  schedule:
    - cron: '0 2 * * *'  # Daily at 2 AM UTC

jobs:
  ai-code-analysis:
    runs-on: ubuntu-latest
    # Simplified condition - will run on PR, push, and manual trigger
    if: github.event_name == 'pull_request' || github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    permissions:
      contents: read
      pull-requests: write
      issues: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |      python -m ensurepip --upgrade
        python -m pip install --upgrade pippython -m ensurepip --upgrade


        python -m pip install --upgrade pip
        python -m pip install openai requests
    
    - name: Get changed files
      id: changed-files
      uses: tj-actions/changed-files@v40
      with:
        files: |
          **.py
          **.js
          **.ts
          **.yaml
          **.yml
          **.json
          **.md
    
    - name: AI Code Analysis
      if: steps.changed-files.outputs.any_changed == 'true'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        DEEPSEEK_API_KEY: ${{ secrets.DEEPSEEK_API_KEY }}
        CLAUDE_API_KEY: ${{ secrets.CLAUDE_API_KEY }}
        GPT4_API_KEY: ${{ secrets.GPT4_API_KEY }}
        GLM_API_KEY: ${{ secrets.GLM_API_KEY }}
        GROK_API_KEY: ${{ secrets.GROK_API_KEY }}
        KIMI_API_KEY: ${{ secrets.KIMI_API_KEY }}
        QWEN_API_KEY: ${{ secrets.QWEN_API_KEY }}
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        GPTOSS_API_KEY: ${{ secrets.GPTOSS_API_KEY }}
        CHANGED_FILES: ${{ steps.changed-files.outputs.all_changed_files }}
        PR_NUMBER: ${{ github.event.pull_request.number }}
        REPO_NAME: ${{ github.repository }}
        COMMIT_SHA: ${{ github.sha }}
      run: |
        python .github/scripts/ai_code_analyzer.py
    
    - name: Security Scan
      if: steps.changed-files.outputs.any_changed == 'true'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        DEEPSEEK_API_KEY: ${{ secrets.DEEPSEEK_API_KEY }}
        CLAUDE_API_KEY: ${{ secrets.CLAUDE_API_KEY }}
        GPT4_API_KEY: ${{ secrets.GPT4_API_KEY }}
        GLM_API_KEY: ${{ secrets.GLM_API_KEY }}
        GROK_API_KEY: ${{ secrets.GROK_API_KEY }}
        KIMI_API_KEY: ${{ secrets.KIMI_API_KEY }}
        QWEN_API_KEY: ${{ secrets.QWEN_API_KEY }}
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        GPTOSS_API_KEY: ${{ secrets.GPTOSS_API_KEY }}
        CHANGED_FILES: ${{ steps.changed-files.outputs.all_changed_files }}
        PR_NUMBER: ${{ github.event.pull_request.number }}
        REPO_NAME: ${{ github.repository }}
      run: |
        python .github/scripts/ai_security_scanner.py

  ai-issue-responder:
    runs-on: ubuntu-latest
    # Simplified condition - will run on issues, issue comments, and manual trigger
    if: github.event_name == 'issues' || github.event_name == 'issue_comment' || github.event_name == 'workflow_dispatch'
    
    permissions:
      issues: write
      contents: read
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |      python -m ensurepip --upgrade
        python -m pip install --upgrade pippython -m ensurepip --upgrade


        python -m pip install --upgrade pip
        python -m pip install openai requests
    
    - name: AI Issue Analysis and Response
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        DEEPSEEK_API_KEY: ${{ secrets.DEEPSEEK_API_KEY }}
        CLAUDE_API_KEY: ${{ secrets.CLAUDE_API_KEY }}
        GPT4_API_KEY: ${{ secrets.GPT4_API_KEY }}
        GLM_API_KEY: ${{ secrets.GLM_API_KEY }}
        GROK_API_KEY: ${{ secrets.GROK_API_KEY }}
        KIMI_API_KEY: ${{ secrets.KIMI_API_KEY }}
        QWEN_API_KEY: ${{ secrets.QWEN_API_KEY }}
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        GPTOSS_API_KEY: ${{ secrets.GPTOSS_API_KEY }}
        ISSUE_NUMBER: ${{ github.event.issue.number }}
        ISSUE_TITLE: ${{ github.event.issue.title }}
        ISSUE_BODY: ${{ github.event.issue.body }}
        ISSUE_AUTHOR: ${{ github.event.issue.user.login }}
        REPO_NAME: ${{ github.repository }}
      run: |
        python .github/scripts/ai_issue_responder.py
    
    - name: Add AI Analysis Label
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.addLabels({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
            labels: ['ai-analyzed', 'auto-response']
          });

  multi-agent-analysis:
    runs-on: ubuntu-latest
    # Will run on schedule, manual trigger, and also on PR/push for comprehensive analysis
    if: github.event_name == 'workflow_dispatch' || github.event_name == 'schedule' || github.event_name == 'pull_request' || github.event_name == 'push'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |      python -m ensurepip --upgrade
        python -m pip install --upgrade pippython -m ensurepip --upgrade


        python -m pip install --upgrade pip
        python -m pip install "openai>=0.27.0" requests
    
    - name: Run Multi-Agent Orchestrator
      env:
        DEEPSEEK_API_KEY: ${{ secrets.DEEPSEEK_API_KEY }}
        CLAUDE_API_KEY: ${{ secrets.CLAUDE_API_KEY }}
        GPT4_API_KEY: ${{ secrets.GPT4_API_KEY }}
        GLM_API_KEY: ${{ secrets.GLM_API_KEY }}
        GROK_API_KEY: ${{ secrets.GROK_API_KEY }}
        KIMI_API_KEY: ${{ secrets.KIMI_API_KEY }}
        QWEN_API_KEY: ${{ secrets.QWEN_API_KEY }}
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        GPTOSS_API_KEY: ${{ secrets.GPTOSS_API_KEY }}
      run: |
        mkdir -p artifacts
        python .github/scripts/multi_agent_orchestrator.py
    
    - name: Upload Multi-Agent Report
      uses: actions/upload-artifact@v4
      with:
        name: multi-agent-intelligence-report
        path: artifacts/multi_agent_report.md
        retention-days: 30
    
    - name: Create Intelligence Summary Issue
      if: github.event_name == 'schedule'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = 'artifacts/multi_agent_report.md';
          
          if (fs.existsSync(path)) {
            const report = fs.readFileSync(path, 'utf8');
            const summary = report.split('## ðŸ“Š Executive Summary')[1]?.split('---')[0] || 'Intelligence analysis completed.';
            
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `ðŸ¤– Daily Intelligence Report - ${new Date().toISOString().split('T')[0]}`,
              body: `## Daily Intelligence Summary\n\n${summary}\n\n---\n\n*Full report available in workflow artifacts.*`,
              labels: ['intelligence-report', 'automated', 'daily']
            });
          }