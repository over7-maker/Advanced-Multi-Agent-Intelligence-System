name: Universal AI Workflow
# Demonstrates using all 16 AI providers with comprehensive fallback

on:
  workflow_dispatch:
    inputs:
      task:
        description: 'Task to perform'
        required: true
        default: 'test'
        type: choice
        options:
          - test
          - analyze
          - generate
  issues:
    types: [opened, edited, labeled]
  pull_request:
    types: [opened, edited, synchronize]

jobs:
  universal-ai-task:
    runs-on: ubuntu-latest
    
    env:
      # All 16 AI API Keys - Comprehensive Fallback Support
      DEEPSEEK_API_KEY: ${{ secrets.DEEPSEEK_API_KEY }}
      GLM_API_KEY: ${{ secrets.GLM_API_KEY }}
      GROK_API_KEY: ${{ secrets.GROK_API_KEY }}
      KIMI_API_KEY: ${{ secrets.KIMI_API_KEY }}
      QWEN_API_KEY: ${{ secrets.QWEN_API_KEY }}
      GPTOSS_API_KEY: ${{ secrets.GPTOSS_API_KEY }}
      GROQAI_API_KEY: ${{ secrets.GROQAI_API_KEY }}
      CEREBRAS_API_KEY: ${{ secrets.CEREBRAS_API_KEY }}
      GEMINIAI_API_KEY: ${{ secrets.GEMINIAI_API_KEY }}
      CODESTRAL_API_KEY: ${{ secrets.CODESTRAL_API_KEY }}
      NVIDIA_API_KEY: ${{ secrets.NVIDIA_API_KEY }}
      GEMINI2_API_KEY: ${{ secrets.GEMINI2_API_KEY }}
      GROQ2_API_KEY: ${{ secrets.GROQ2_API_KEY }}
      COHERE_API_KEY: ${{ secrets.COHERE_API_KEY }}
      CHUTES_API_KEY: ${{ secrets.CHUTES_API_KEY }}
      
      # GitHub context
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      REPO_NAME: ${{ github.repository }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install aiohttp asyncio
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      
      - name: Check API Keys Configuration
        run: |
          echo "üîç Checking configured API keys..."
          
          count=0
          [ ! -z "$DEEPSEEK_API_KEY" ] && echo "‚úÖ DeepSeek" && ((count++)) || echo "‚ùå DeepSeek"
          [ ! -z "$GLM_API_KEY" ] && echo "‚úÖ GLM" && ((count++)) || echo "‚ùå GLM"
          [ ! -z "$GROK_API_KEY" ] && echo "‚úÖ Grok" && ((count++)) || echo "‚ùå Grok"
          [ ! -z "$KIMI_API_KEY" ] && echo "‚úÖ Kimi" && ((count++)) || echo "‚ùå Kimi"
          [ ! -z "$QWEN_API_KEY" ] && echo "‚úÖ Qwen" && ((count++)) || echo "‚ùå Qwen"
          [ ! -z "$GPTOSS_API_KEY" ] && echo "‚úÖ GPT OSS" && ((count++)) || echo "‚ùå GPT OSS"
          [ ! -z "$GROQAI_API_KEY" ] && echo "‚úÖ Groq AI" && ((count++)) || echo "‚ùå Groq AI"
          [ ! -z "$CEREBRAS_API_KEY" ] && echo "‚úÖ Cerebras" && ((count++)) || echo "‚ùå Cerebras"
          [ ! -z "$GEMINIAI_API_KEY" ] && echo "‚úÖ Gemini" && ((count++)) || echo "‚ùå Gemini"
          [ ! -z "$CODESTRAL_API_KEY" ] && echo "‚úÖ Codestral" && ((count++)) || echo "‚ùå Codestral"
          [ ! -z "$NVIDIA_API_KEY" ] && echo "‚úÖ NVIDIA" && ((count++)) || echo "‚ùå NVIDIA"
          [ ! -z "$GEMINI2_API_KEY" ] && echo "‚úÖ Gemini 2" && ((count++)) || echo "‚ùå Gemini 2"
          [ ! -z "$GROQ2_API_KEY" ] && echo "‚úÖ Groq 2" && ((count++)) || echo "‚ùå Groq 2"
          [ ! -z "$COHERE_API_KEY" ] && echo "‚úÖ Cohere" && ((count++)) || echo "‚ùå Cohere"
          [ ! -z "$CHUTES_API_KEY" ] && echo "‚úÖ Chutes" && ((count++)) || echo "‚ùå Chutes"
          
          echo ""
          echo "üìä Total configured: $count/15 providers"
      
      - name: Test Universal AI Manager
        run: |
          echo "üß™ Testing Universal AI Manager..."
          python3 standalone_universal_ai_manager.py
      
      - name: Run AI Task
        id: ai_task
        run: |
          python3 <<EOF
          import asyncio
          import sys
          from pathlib import Path
          
          # Add project to path
          sys.path.insert(0, str(Path.cwd()))
          
          from standalone_universal_ai_manager import get_manager
          
          async def main():
              manager = get_manager()
              
              # Show configuration
              print(manager.get_config_summary())
              print()
              
              # Test generation with all strategies
              strategies = ['priority', 'intelligent', 'fastest']
              
              for strategy in strategies:
                  print(f"üß™ Testing {strategy} strategy...")
                  result = await manager.generate(
                      prompt="Write a brief test message confirming the AI system is working.",
                      system_prompt="You are a helpful AI assistant.",
                      strategy=strategy,
                      max_tokens=100
                  )
                  
                  if result and result.get('success', False):
                      print(f"‚úÖ {strategy.upper()} - Success with {result.get('provider_name', 'Unknown')}")
                      print(f"   Response: {result.get('content', 'No content')[:100]}...")
                      print(f"   Time: {result.get('response_time', 0):.2f}s")
                  else:
                      print(f"‚ùå {strategy.upper()} - Failed: {result.get('error', 'Unknown error') if result else 'No result returned'}")
                  print()
              
              # Show final stats
              print("=" * 80)
              print("üìä FINAL STATISTICS")
              print("=" * 80)
              stats = manager.get_stats()
              for key, value in stats.items():
                  print(f"  {key}: {value}")
              print()
              
              # Show provider health
              print("=" * 80)
              print("üè• PROVIDER HEALTH")
              print("=" * 80)
              health = manager.get_provider_health()
              for provider_id, info in health.items():
                  status_emoji = "‚úÖ" if info['available'] else "‚ùå"
                  print(f"{status_emoji} {info['name']:25s} | Success: {info['success_rate']:6s} | Avg Time: {info['avg_response_time']:8s}")
          
          asyncio.run(main())
          EOF
      
      - name: Upload Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: universal-ai-results
          path: |
            *.log
            artifacts/**
          retention-days: 30
      
      - name: Summary
        if: always()
        run: |
          echo "## ü§ñ Universal AI Manager Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "‚úÖ Workflow completed using Universal AI Manager" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Features" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ 16 AI providers with automatic fallback" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Intelligent provider selection" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Circuit breaker for failing providers" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Rate limit handling" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Performance tracking" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "See logs for detailed statistics and provider health information." >> $GITHUB_STEP_SUMMARY
