# Version: v1.0.0
# Generated by AMAS Release System
name: Enhanced Multi-API Response

on:
  issues:
    types: [opened, edited]
  issue_comment:
    types: [created]

jobs:
  multi-api-response:
    runs-on: ubuntu-latest
    if: github.event.issue.state == 'open'
    
    permissions:
      issues: write
      pull-requests: write
      contents: read
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        pip install openai requests python-dotenv
    
    - name: Multi-API Issue Response
      env:
        DEEPSEEK_API_KEY: ${{ secrets.DEEPSEEK_API_KEY }}
        GLM_API_KEY: ${{ secrets.GLM_API_KEY }}
        GROK_API_KEY: ${{ secrets.GROK_API_KEY }}
        KIMI_API_KEY: ${{ secrets.KIMI_API_KEY }}
        QWEN_API_KEY: ${{ secrets.QWEN_API_KEY }}
        GPTOSS_API_KEY: ${{ secrets.GPTOSS_API_KEY }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITHUB_REPOSITORY: ${{ github.repository }}
        ISSUE_NUMBER: ${{ github.event.issue.number }}
      run: |
        python .github/scripts/multi_api_responder.py
    
    - name: Show AI Provider Status
      env:
        DEEPSEEK_API_KEY: ${{ secrets.DEEPSEEK_API_KEY }}
        GLM_API_KEY: ${{ secrets.GLM_API_KEY }}
        GROK_API_KEY: ${{ secrets.GROK_API_KEY }}
        KIMI_API_KEY: ${{ secrets.KIMI_API_KEY }}
        QWEN_API_KEY: ${{ secrets.QWEN_API_KEY }}
        GPTOSS_API_KEY: ${{ secrets.GPTOSS_API_KEY }}
      run: |
        python -c "
        from ai_service_manager import AIServiceManager
        manager = AIServiceManager()
        
        print('üìä AI Provider Status:')
        stats = manager.get_provider_stats()
        working_providers = []
        
        for name, stat in stats.items():
            if stat['active'] and stat['has_key']:
                working_providers.append(name)
                print(f'  ‚úÖ {name}: Active (Success: {stat[\"success_rate\"]})')
            else:
                print(f'  ‚ùå {name}: Inactive')
        
        print(f'\\nüéØ Working Providers: {len(working_providers)}/{len(stats)}')
        if working_providers:
            print(f'‚úÖ Available: {', '.join(working_providers)}')
        else:
            print('‚ö†Ô∏è No AI providers are working!')
        "