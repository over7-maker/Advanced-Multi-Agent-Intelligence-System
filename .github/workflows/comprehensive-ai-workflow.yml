name: Comprehensive AI Workflow

# Enhanced trigger conditions
on:
  issues:
    types: [opened, edited, labeled, closed, reopened]
  pull_request:
    types: [opened, synchronize, reopened, closed]
  workflow_dispatch:
    inputs:
      issue_number:
        description: 'Issue number to analyze'
        required: false
        type: string
      workflow_type:
        description: 'Type of workflow to run'
        required: false
        type: choice
        options: ['issue-analysis', 'code-review', 'security-scan', 'full-analysis']
        default: 'full-analysis'
  schedule:
    - cron: '0 2 * * *'  # Daily at 2 AM UTC for maintenance

jobs:
  # Pre-flight checks
  pre-flight-checks:
    runs-on: ubuntu-latest
    outputs:
      api-keys-available: ${{ steps.check-keys.outputs.available }}
      workflow-type: ${{ steps.determine-type.outputs.type }}
    
    steps:
    - name: Check API Keys Availability
      id: check-keys
      run: |
        echo "Checking API key availability..."
        keys_available=true
        
        if [ -z "${{ secrets.OPENROUTER_API_KEY }}" ] && [ -z "${{ secrets.DEEPSEEK_API_KEY }}" ]; then
          echo "❌ No API keys available"
          keys_available=false
        else
          echo "✅ API keys available"
        fi
        
        echo "available=$keys_available" >> $GITHUB_OUTPUT
    
    - name: Determine Workflow Type
      id: determine-type
      run: |
        if [ "${{ github.event.inputs.workflow_type }}" != "" ]; then
          echo "type=${{ github.event.inputs.workflow_type }}" >> $GITHUB_OUTPUT
        elif [ "${{ github.event_name }}" == "issues" ]; then
          echo "type=issue-analysis" >> $GITHUB_OUTPUT
        elif [ "${{ github.event_name }}" == "pull_request" ]; then
          echo "type=code-review" >> $GITHUB_OUTPUT
        else
          echo "type=full-analysis" >> $GITHUB_OUTPUT
        fi

  # Issue Analysis and Response
  issue-analysis:
    runs-on: ubuntu-latest
    needs: pre-flight-checks
    if: needs.pre-flight-checks.outputs.api-keys-available == 'true' && (needs.pre-flight-checks.outputs.workflow-type == 'issue-analysis' || needs.pre-flight-checks.outputs.workflow-type == 'full-analysis')
    
    permissions:
      issues: write
      contents: read
      pull-requests: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        pip install --upgrade pip
        pip install openai requests python-dotenv PyGithub gitpython
    
    - name: AI Issue Analysis and Response
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
        DEEPSEEK_API_KEY: ${{ secrets.DEEPSEEK_API_KEY }}
        ISSUE_NUMBER: ${{ github.event.issue.number || github.event.inputs.issue_number }}
        ISSUE_TITLE: ${{ github.event.issue.title }}
        ISSUE_BODY: ${{ github.event.issue.body }}
        ISSUE_AUTHOR: ${{ github.event.issue.user.login }}
        REPO_NAME: ${{ github.repository }}
      run: |
        python .github/scripts/ai_issue_responder.py
    
    - name: Multi-Agent Intelligence Analysis
      env:
        DEEPSEEK_API_KEY: ${{ secrets.DEEPSEEK_API_KEY }}
        GLM_API_KEY: ${{ secrets.GLM_API_KEY }}
        GROK_API_KEY: ${{ secrets.GROK_API_KEY }}
        ISSUE_NUMBER: ${{ github.event.issue.number || github.event.inputs.issue_number }}
        REPO_NAME: ${{ github.repository }}
      run: |
        mkdir -p artifacts
        python .github/scripts/multi_agent_orchestrator.py
    
    - name: Issue Resolution Integration
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
        DEEPSEEK_API_KEY: ${{ secrets.DEEPSEEK_API_KEY }}
        ISSUE_NUMBER: ${{ github.event.issue.number || github.event.inputs.issue_number }}
        REPO_NAME: ${{ github.repository }}
      run: |
        python .github/scripts/issue_resolution_integrator.py
    
    - name: Add Comprehensive Labels
      uses: actions/github-script@v7
      with:
        script: |
          const issueNumber = context.issue.number || '${{ github.event.inputs.issue_number }}';
          await github.rest.issues.addLabels({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: issueNumber,
            labels: ['ai-analyzed', 'auto-response', 'ai-resolution-ready', 'comprehensive-analysis']
          });

  # Code Review and Analysis
  code-review:
    runs-on: ubuntu-latest
    needs: pre-flight-checks
    if: needs.pre-flight-checks.outputs.api-keys-available == 'true' && (needs.pre-flight-checks.outputs.workflow-type == 'code-review' || needs.pre-flight-checks.outputs.workflow-type == 'full-analysis')
    
    permissions:
      contents: read
      pull-requests: write
      issues: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        pip install --upgrade pip
        pip install openai requests python-dotenv PyGithub gitpython
    
    - name: Get changed files
      id: changed-files
      uses: tj-actions/changed-files@v40
      with:
        files: |
          **.py
          **.js
          **.ts
          **.yaml
          **.yml
          **.json
          **.md
          **.go
          **.java
          **.php
          **.rb
          **.cpp
          **.c
          **.h
    
    - name: AI Code Analysis
      if: steps.changed-files.outputs.any_changed == 'true'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
        DEEPSEEK_API_KEY: ${{ secrets.DEEPSEEK_API_KEY }}
        CHANGED_FILES: ${{ steps.changed-files.outputs.all_changed_files }}
        PR_NUMBER: ${{ github.event.pull_request.number }}
        REPO_NAME: ${{ github.repository }}
        COMMIT_SHA: ${{ github.sha }}
      run: |
        python .github/scripts/ai_code_analyzer.py
    
    - name: Security Scan
      if: steps.changed-files.outputs.any_changed == 'true'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
        DEEPSEEK_API_KEY: ${{ secrets.DEEPSEEK_API_KEY }}
        CHANGED_FILES: ${{ steps.changed-files.outputs.all_changed_files }}
        PR_NUMBER: ${{ github.event.pull_request.number }}
        REPO_NAME: ${{ github.repository }}
      run: |
        python .github/scripts/ai_security_scanner.py
    
    - name: Performance Analysis
      if: steps.changed-files.outputs.any_changed == 'true'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
        DEEPSEEK_API_KEY: ${{ secrets.DEEPSEEK_API_KEY }}
        CHANGED_FILES: ${{ steps.changed-files.outputs.all_changed_files }}
        PR_NUMBER: ${{ github.event.pull_request.number }}
        REPO_NAME: ${{ github.repository }}
      run: |
        python .github/scripts/performance_analyzer.py || echo "Performance analyzer not available, skipping..."

  # Security Scan
  security-scan:
    runs-on: ubuntu-latest
    needs: pre-flight-checks
    if: needs.pre-flight-checks.outputs.api-keys-available == 'true' && (needs.pre-flight-checks.outputs.workflow-type == 'security-scan' || needs.pre-flight-checks.outputs.workflow-type == 'full-analysis')
    
    permissions:
      contents: read
      pull-requests: write
      issues: write
      security-events: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        pip install --upgrade pip
        pip install openai requests python-dotenv PyGithub gitpython bandit safety
    
    - name: Comprehensive Security Scan
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
        DEEPSEEK_API_KEY: ${{ secrets.DEEPSEEK_API_KEY }}
        REPO_NAME: ${{ github.repository }}
      run: |
        python .github/scripts/comprehensive_security_scanner.py
    
    - name: Dependency Vulnerability Scan
      run: |
        safety check --json --output safety-report.json || echo "Safety check completed with issues"
        bandit -r . -f json -o bandit-report.json || echo "Bandit scan completed with issues"
    
    - name: Upload Security Reports
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          safety-report.json
          bandit-report.json
          security-analysis-report.md

  # Workflow Health Check
  health-check:
    runs-on: ubuntu-latest
    if: always()
    
    permissions:
      actions: read
      contents: read
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        pip install requests
    
    - name: Workflow Health Check
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        REPO_NAME: ${{ github.repository }}
      run: |
        python .github/scripts/workflow_status_checker.py
    
    - name: Generate Health Report
      run: |
        echo "# Workflow Health Report" > health-report.md
        echo "Generated: $(date)" >> health-report.md
        echo "Workflow: ${{ github.workflow }}" >> health-report.md
        echo "Event: ${{ github.event_name }}" >> health-report.md
        echo "Status: ${{ job.status }}" >> health-report.md
    
    - name: Upload Health Report
      uses: actions/upload-artifact@v4
      with:
        name: health-report
        path: health-report.md

  # Notification and Summary
  notification:
    runs-on: ubuntu-latest
    needs: [pre-flight-checks, issue-analysis, code-review, security-scan, health-check]
    if: always()
    
    permissions:
      issues: write
      pull-requests: write
    
    steps:
    - name: Generate Summary Report
      run: |
        echo "# Comprehensive AI Workflow Summary" > summary-report.md
        echo "Generated: $(date)" >> summary-report.md
        echo "" >> summary-report.md
        echo "## Workflow Status" >> summary-report.md
        echo "- Pre-flight checks: ${{ needs.pre-flight-checks.result }}" >> summary-report.md
        echo "- Issue analysis: ${{ needs.issue-analysis.result }}" >> summary-report.md
        echo "- Code review: ${{ needs.code-review.result }}" >> summary-report.md
        echo "- Security scan: ${{ needs.security-scan.result }}" >> summary-report.md
        echo "- Health check: ${{ needs.health-check.result }}" >> summary-report.md
        echo "" >> summary-report.md
        echo "## Next Steps" >> summary-report.md
        echo "- Review all generated reports" >> summary-report.md
        echo "- Address any security issues found" >> summary-report.md
        echo "- Implement code review recommendations" >> summary-report.md
        echo "- Update issue status as needed" >> summary-report.md
    
    - name: Upload Summary Report
      uses: actions/upload-artifact@v4
      with:
        name: comprehensive-summary
        path: summary-report.md