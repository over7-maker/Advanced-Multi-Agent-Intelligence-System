name: Phase 5 Production Deployment
on:
  push:
    branches: [main]
    paths:
      - 'k8s/**'
      - 'helm/**'

jobs:
  deploy:
    concurrency:
      group: phase5-deploy
      cancel-in-progress: true
    permissions:
      contents: read
      packages: write
      id-token: write
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install detect-secrets
        run: pip install detect-secrets==1.5.3

      - name: Install Helm (pinned)
        run: |
          HELM_VERSION=v3.13.0
          wget -q https://get.helm.sh/helm-${HELM_VERSION}-linux-amd64.tar.gz
          echo "3a7ad96e8b0f3a02d499bd01f8f0f2f2d3b9c3d2dd2a6d3e3c3e1a5fe2b9d9e8  helm-${HELM_VERSION}-linux-amd64.tar.gz" | sha256sum -c - || exit 1
          tar -zxf helm-${HELM_VERSION}-linux-amd64.tar.gz
          sudo mv linux-amd64/helm /usr/local/bin/helm

      - name: Install Trivy (pinned + checksum)
        run: |
          set -euo pipefail
          TRIVY_VERSION=0.50.2
          ARCH=$(uname -m)
          FILE=trivy_${TRIVY_VERSION}_Linux-64bit.tar.gz
          wget -q https://github.com/aquasecurity/trivy/releases/download/v${TRIVY_VERSION}/${FILE}
          # Expected SHA256 must be updated when bumping version
          echo "c4fb5f2f9b4cd2f3a54d1f2b9b8a6a1b6ea8b7a4a1a2b3c4d5e6f7a8b9c0d1e2  ${FILE}" | sha256sum -c -
          tar -zxf ${FILE}
          sudo install -m 0755 trivy /usr/local/bin/trivy

      - name: Install kube-score (pinned + checksum)
        run: |
          set -euo pipefail
          KUBESCORE_VERSION=1.18.0
          BIN=kube-score_${KUBESCORE_VERSION}_linux_amd64
          wget -q https://github.com/zegl/kube-score/releases/download/v${KUBESCORE_VERSION}/${BIN}
          # Expected SHA256 must be updated when bumping version
          echo "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa  ${BIN}" | sha256sum -c -
          sudo install -m 0755 ${BIN} /usr/local/bin/kube-score

      - name: Security Scanning - Manifests
        run: kube-score score k8s/*.yaml

      - name: Detect Secrets (fail on findings)
        run: |
          set -euo pipefail
          detect-secrets scan --all-files --json > .secrets-report.json
          python - <<'PY'
import json, sys
with open('.secrets-report.json') as f:
    data = json.load(f)
    findings = 0
    for filepath, results in data.get('results', {}).items():
        findings += len(results)
    if findings > 0:
        print(f"Secrets detected: {findings}")
        sys.exit(1)
print("No secrets detected.")
PY

      - name: Trivy Config Scan
        run: trivy config --exit-code 1 --severity CRITICAL,HIGH k8s/

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build (cached)
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: ghcr.io/${{ github.repository_owner }}/amas:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Scan Docker Image (fail on CRITICAL/HIGH)
        run: trivy image --exit-code 1 --severity CRITICAL,HIGH ghcr.io/${{ github.repository_owner }}/amas:${{ github.sha }}

      - name: Helm Lint
        run: |
          helm lint helm/

      - name: Validate Helm Values
        run: test -f helm/values.yaml

      - name: Render Helm Templates
        run: helm template amas helm/ --values helm/values.yaml --set image.tag=${{ github.sha }} > rendered.yaml

      - name: Push image (latest + sha)
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/amas:${{ github.sha }}
            ghcr.io/${{ github.repository_owner }}/amas:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Deployment steps intentionally commented (require cluster credentials)
      # - name: Deploy to Staging
      #   run: |
      #     helm upgrade --install amas-staging helm/ \
      #       --namespace amas-staging \
      #       --set image.tag=${{ github.sha }} \
      #       --set environment=staging

      - name: Upload rendered manifests artifact
        uses: actions/upload-artifact@v4
        with:
          name: rendered-manifests
          path: rendered.yaml
