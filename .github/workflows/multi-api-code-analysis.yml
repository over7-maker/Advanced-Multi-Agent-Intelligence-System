# Version: v1.0.0
# Generated by AMAS Release System
name: Multi-API Code Analysis

on:
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches: [main, develop]

jobs:
  ai-code-analysis:
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      pull-requests: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        pip install openai requests python-dotenv
    
    - name: Multi-API Code Analysis
      env:
        DEEPSEEK_API_KEY: ${{ secrets.DEEPSEEK_API_KEY }}
        GLM_API_KEY: ${{ secrets.GLM_API_KEY }}
        GROK_API_KEY: ${{ secrets.GROK_API_KEY }}
        KIMI_API_KEY: ${{ secrets.KIMI_API_KEY }}
        QWEN_API_KEY: ${{ secrets.QWEN_API_KEY }}
        GPTOSS_API_KEY: ${{ secrets.GPTOSS_API_KEY }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        python -c "
        import sys
        sys.path.append('.')
        from ai_service_manager import AIServiceManager
        
        import os
        import requests
        import subprocess
        
        # Initialize AI manager
        manager = AIServiceManager()
        
        # Get changed files
        if '${{ github.event_name }}' == 'pull_request':
            base_sha = '${{ github.event.pull_request.base.sha }}'
            head_sha = '${{ github.event.pull_request.head.sha }}'
            diff_cmd = f'git diff {base_sha}..{head_sha} --name-only'
        else:
            diff_cmd = 'git diff HEAD~1 --name-only'
        
        try:
            changed_files = subprocess.check_output(diff_cmd, shell=True, text=True).strip().split('\n')
            changed_files = [f for f in changed_files if f and f.endswith(('.py', '.js', '.ts', '.java', '.cpp', '.c', '.go', '.rs'))]
        except:
            changed_files = []
        
        if not changed_files:
            print('No code files changed, skipping analysis')
            exit(0)
        
        print(f'üîç Analyzing {len(changed_files)} changed files...')
        
        analysis_results = []
        
        for file_path in changed_files[:5]:  # Limit to 5 files
            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    code_content = f.read()
                
                if len(code_content) > 10000:  # Skip very large files
                    continue
                
                print(f'üìù Analyzing {file_path}...')
                
                # Get file extension for language detection
                file_ext = file_path.split('.')[-1]
                language_map = {
                    'py': 'python', 'js': 'javascript', 'ts': 'typescript',
                    'java': 'java', 'cpp': 'cpp', 'c': 'c', 'go': 'go', 'rs': 'rust'
                }
                language = language_map.get(file_ext, 'python')
                
                # Analyze code
                analysis, provider, error = manager.analyze_code(code_content, language)
                
                if analysis:
                    analysis_results.append({
                        'file': file_path,
                        'analysis': analysis,
                        'provider': provider
                    })
                    print(f'‚úÖ Analysis complete for {file_path} using {provider}')
                else:
                    print(f'‚ùå Analysis failed for {file_path}: {error}')
                    
            except Exception as e:
                print(f'‚ùå Error analyzing {file_path}: {e}')
        
        # Post analysis results
        if analysis_results and '${{ github.event_name }}' == 'pull_request':
            pr_number = ${{ github.event.pull_request.number }}
            repo = '${{ github.repository }}'
            
            comment_url = f'https://api.github.com/repos/{repo}/issues/{pr_number}/comments'
            headers = {
                'Authorization': f'Bearer {os.environ[\"GITHUB_TOKEN\"]}',
                'Accept': 'application/vnd.github.v3+json'
            }
            
            comment_body = '## ü§ñ Multi-API Code Analysis\n\n'
            for result in analysis_results:
                comment_body += f'### üìÅ {result[\"file\"]} (via {result[\"provider\"]})\n'
                comment_body += f'{result[\"analysis\"]}\n\n---\n\n'
            
            comment_body += '*This analysis was generated using our multi-API AI system.*'
            
            comment_data = {'body': comment_body}
            
            try:
                comment_response = requests.post(comment_url, headers=headers, json=comment_data)
                if comment_response.status_code == 201:
                    print('‚úÖ Analysis posted to PR')
                else:
                    print(f'‚ùå Failed to post analysis: {comment_response.status_code}')
            except Exception as e:
                print(f'‚ùå Error posting analysis: {e}')
        
        print(f'üìä Analysis complete: {len(analysis_results)} files analyzed')
        "
    
    - name: Security Analysis
      env:
        DEEPSEEK_API_KEY: ${{ secrets.DEEPSEEK_API_KEY }}
        GLM_API_KEY: ${{ secrets.GLM_API_KEY }}
        GROK_API_KEY: ${{ secrets.GROK_API_KEY }}
        KIMI_API_KEY: ${{ secrets.KIMI_API_KEY }}
        QWEN_API_KEY: ${{ secrets.QWEN_API_KEY }}
        GPTOSS_API_KEY: ${{ secrets.GPTOSS_API_KEY }}
      run: |
        python -c "
        from ai_service_manager import AIServiceManager
        import subprocess
        
        manager = AIServiceManager()
        
        # Get changed Python files for security analysis
        try:
            if '${{ github.event_name }}' == 'pull_request':
                base_sha = '${{ github.event.pull_request.base.sha }}'
                head_sha = '${{ github.event.pull_request.head.sha }}'
                diff_cmd = f'git diff {base_sha}..{head_sha} --name-only'
            else:
                diff_cmd = 'git diff HEAD~1 --name-only'
            
            changed_files = subprocess.check_output(diff_cmd, shell=True, text=True).strip().split('\n')
            python_files = [f for f in changed_files if f and f.endswith('.py')]
        except:
            python_files = []
        
        if python_files:
            print(f'üîí Running security analysis on {len(python_files)} Python files...')
            
            for file_path in python_files[:3]:  # Limit to 3 files
                try:
                    with open(file_path, 'r', encoding='utf-8') as f:
                        code_content = f.read()
                    
                    if len(code_content) > 5000:  # Skip very large files
                        continue
                    
                    security_analysis, provider, error = manager.generate_security_analysis(code_content)
                    
                    if security_analysis:
                        print(f'‚úÖ Security analysis complete for {file_path} using {provider}')
                        # You could post security findings to PR here
                    else:
                        print(f'‚ùå Security analysis failed for {file_path}: {error}')
                        
                except Exception as e:
                    print(f'‚ùå Error in security analysis for {file_path}: {e}')
        else:
            print('No Python files changed, skipping security analysis')
        "