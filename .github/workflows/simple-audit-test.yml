name: 🔍 Simple Audit Test

on:
  workflow_dispatch:
    inputs:
      audit_type:
        description: 'Audit Type'
        required: true
        default: 'comprehensive'
        type: choice
        options:
          - comprehensive
          - triggers-only
          - api-keys-only
          - legacy-only
          - security-only

env:
  PYTHON_VERSION: '3.11'
  AUDIT_TYPE: ${{ github.event.inputs.audit_type || 'comprehensive' }}

jobs:
  simple_audit:
    name: 🔍 Simple Audit Test
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: 📦 Install Dependencies
      run: |
        set -e  # Exit on any error
        set -o pipefail  # Exit on pipe errors
        python -m pip install --upgrade pip
        pip install pyyaml requests beautifulsoup4
    
    - name: 🔍 Run Comprehensive Audit
      id: run_audit
      run: |
        set -e  # Exit on any error
        set -o pipefail  # Exit on pipe errors
        echo "🔍 Starting Simple Audit Test"
        echo "Audit Type: $AUDIT_TYPE"
        echo ""
        
        # Run comprehensive audit
        python3 .github/scripts/comprehensive_audit_engine.py \
          --audit-type $AUDIT_TYPE \
          --create-issues false \
          --notify-on-failure false \
          --output simple_audit_results.json
        
        echo "✅ Simple audit completed"
    
    - name: 📊 Display Audit Results
      run: |
        set -e  # Exit on any error
        set -o pipefail  # Exit on pipe errors
        echo "📊 AUDIT RESULTS SUMMARY"
        echo "========================="
        
        if [ -f simple_audit_results.json ]; then
          echo "📁 Audit results file created successfully"
          
          # Display key statistics
          echo ""
          echo "📈 STATISTICS:"
          python3 -c "
          import json
          with open('simple_audit_results.json', 'r') as f:
              data = json.load(f)
          stats = data.get('statistics', {})
          print(f'  Total Issues: {stats.get(\"total_issues\", 0)}')
          print(f'  Critical Issues: {stats.get(\"critical_issues\", 0)}')
          print(f'  High Priority: {stats.get(\"high_priority_issues\", 0)}')
          print(f'  Medium Priority: {stats.get(\"medium_priority_issues\", 0)}')
          print(f'  Low Priority: {stats.get(\"low_priority_issues\", 0)}')
          "
          
          echo ""
          echo "🎯 TOP RECOMMENDATIONS:"
          python3 -c "
          import json
          with open('simple_audit_results.json', 'r') as f:
              data = json.load(f)
          recommendations = data.get('recommendations', [])
          for i, rec in enumerate(recommendations[:3], 1):
              print(f'  {i}. [{rec[\"priority\"].upper()}] {rec[\"title\"]}')
          "
          
          echo ""
          echo "✅ Audit completed successfully!"
        else
          echo "❌ Audit results file not found"
          exit 1
        fi
    
    - name: 📤 Upload Audit Results
      uses: actions/upload-artifact@v4
      with:
        name: simple-audit-results
        path: simple_audit_results.json
        retention-days: 30
    
    - name: 📝 Create Summary Comment
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          try {
            const results = JSON.parse(fs.readFileSync('simple_audit_results.json', 'utf8'));
            const stats = results.statistics || {};
            
            const summary = `## 🔍 Simple Audit Test Results
            
            **Audit Type:** ${{ env.AUDIT_TYPE }}
            **Timestamp:** ${new Date().toISOString()}
            
            ### 📊 Statistics
            - **Total Issues:** ${stats.total_issues || 0}
            - **Critical Issues:** ${stats.critical_issues || 0}
            - **High Priority:** ${stats.high_priority_issues || 0}
            - **Medium Priority:** ${stats.medium_priority_issues || 0}
            - **Low Priority:** ${stats.low_priority_issues || 0}
            
            ### 🎯 Top Recommendations
            ${(results.recommendations || []).slice(0, 3).map((rec, i) => 
              `${i + 1}. **[${rec.priority.toUpperCase()}]** ${rec.title}`
            ).join('\n')}
            
            ---
            *Generated by Simple Audit Test*`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });
          } catch (error) {
            console.log('Error creating comment:', error.message);
          }