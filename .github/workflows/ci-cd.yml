name: AMAS CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  release:
    types: [published]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '20'
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: amas

jobs:
  # CODE QUALITY & TESTING
  
  quality-gate:
    name: 🔍 Quality Gate
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: 🐍 Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: 📦 Install dependencies
      run: |
        python -m ensurepip --upgrade
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    - name: 🤖 Auto-fix code quality issues
      run: |
        chmod +x .github/scripts/simple-auto-fix.sh
        ./.github/scripts/simple-auto-fix.sh
    
    - name: 🎨 Code formatting check
      run: |
        black --check src/ tests/
        isort --check-only src/ tests/
    
    - name: 🔍 Linting
      run: |
        flake8 src/ tests/ --max-complexity=10 --max-line-length=100
        
    - name: 🏷️ Type checking
      run: |
        mypy src/
    
    - name: 🔒 Security scan
      run: |
        bandit -r src/ -f json -o bandit-report.json
        safety check
    
    - name: 📊 Upload security report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-report
        path: bandit-report.json
        retention-days: 30

  # TESTING SUITE
  
  test-suite:
    name: 🧪 Test Suite
    runs-on: ubuntu-latest
    needs: quality-gate
    
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']
        test-type: [unit, integration]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: amas_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🐍 Setup Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: 📦 Install dependencies
      run: |
        python -m ensurepip --upgrade
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    - name: 🏗️ Setup test environment
      run: |
        mkdir -p logs data models
        cp .env.example .env
        # Set test database URL
        echo "AMAS_DB_HOST=localhost" >> .env
        echo "AMAS_DB_PASSWORD=test_password" >> .env
        echo "AMAS_DB_NAME=amas_test" >> .env
    
    - name: 🧪 Run ${{ matrix.test-type }} tests
      run: |
        if [ "${{ matrix.test-type }}" = "unit" ]; then
          pytest tests/ -m unit
        else
          pytest tests/ -m integration
        fi
      env:
        AMAS_ENVIRONMENT: testing
        AMAS_DB_HOST: localhost
        AMAS_DB_PASSWORD: test_password
        AMAS_DB_NAME: amas_test
        AMAS_REDIS_HOST: localhost
    
    - name: 📊 Test completed
      run: |
        echo "✅ All tests completed successfully"

  # DOCKER BUILD & SECURITY
  
  docker-build:
    name: 🐳 Docker Build
    runs-on: ubuntu-latest
    needs: [quality-gate, test-suite]
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: 🔑 Login to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: 🏗️ Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: |
          ${{ env.DOCKER_REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:latest
          ${{ env.DOCKER_REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: 🔍 Docker security scan
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.DOCKER_REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: 📊 Upload security scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # E2E TESTING
  
  e2e-tests:
    name: 🎭 End-to-End Tests
    runs-on: ubuntu-latest
    needs: docker-build
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🐳 Start services
      run: |
        docker-compose -f docker-compose.test.yml up -d
        
        # Wait for services to be ready
        timeout 120 bash -c 'until curl -f http://localhost:8000/health; do sleep 2; done'
    
    - name: 🐍 Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: 📦 Install test dependencies
      run: |

        python -m ensurepip --upgrade
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    - name: 🎭 Run E2E tests
      run: |
        pytest tests/e2e/ -v --tb=short
      env:
        AMAS_API_URL: http://localhost:8000
    
    - name: 📋 Collect logs
      if: always()
      run: |
        mkdir -p logs/e2e
        docker-compose -f docker-compose.test.yml logs > logs/e2e/docker-logs.txt
    
    - name: 📊 Upload E2E artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: e2e-test-artifacts
        path: |
          logs/e2e/
          screenshots/
        retention-days: 14
    
    - name: 🛑 Cleanup
      if: always()
      run: |
        docker-compose -f docker-compose.test.yml down -v

  # 