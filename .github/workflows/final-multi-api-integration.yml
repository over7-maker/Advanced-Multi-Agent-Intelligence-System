name: Final Multi-API Integration

on:
  schedule:
    - cron: '0 6 * * *'  # Daily at 6 AM
  workflow_dispatch:
  push:
    branches: [main]

jobs:
  comprehensive-testing:
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      issues: write
      pull-requests: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        pip install openai requests python-dotenv
    
    - name: Comprehensive API Testing
      env:
        DEEPSEEK_API_KEY: ${{ secrets.DEEPSEEK_API_KEY }}
        GLM_API_KEY: ${{ secrets.GLM_API_KEY }}
        GROK_API_KEY: ${{ secrets.GROK_API_KEY }}
        KIMI_API_KEY: ${{ secrets.KIMI_API_KEY }}
        QWEN_API_KEY: ${{ secrets.QWEN_API_KEY }}
        GPTOSS_API_KEY: ${{ secrets.GPTOSS_API_KEY }}
      run: |
        python test_all_apis_comprehensive.py
    
    - name: Upload Test Report
      uses: actions/upload-artifact@v4
      with:
        name: comprehensive-api-test-report
        path: comprehensive-api-test-report.md
    
    - name: Create Status Issue (if scheduled)
      if: github.event_name == 'schedule'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        python -c "
        import requests
        import json
        from datetime import datetime
        
        # Read test report
        try:
            with open('comprehensive-api-test-report.md', 'r') as f:
                report_content = f.read()
        except:
            report_content = 'Test report not available'
        
        # Create status issue
        url = f'https://api.github.com/repos/${{ github.repository }}/issues'
        headers = {
            'Authorization': f'Bearer {os.environ[\"GITHUB_TOKEN\"]}',
            'Accept': 'application/vnd.github.v3+json'
        }
        
        issue_data = {
            'title': f'🤖 Daily AI System Status - {datetime.now().strftime(\"%Y-%m-%d\")}',
            'body': f'## 📊 Daily AI System Status Report\n\n{report_content}\n\n---\n*Generated automatically by our multi-API system*',
            'labels': ['ai-status', 'automated', 'daily-report']
        }
        
        try:
            response = requests.post(url, headers=headers, json=issue_data)
            if response.status_code == 201:
                print('✅ Status issue created')
            else:
                print(f'❌ Failed to create status issue: {response.status_code}')
        except Exception as e:
            print(f'❌ Error creating status issue: {e}')
        "

  ai-development-assistant:
    runs-on: ubuntu-latest
    needs: comprehensive-testing
    if: always()
    
    permissions:
      contents: read
      issues: write
      pull-requests: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        pip install openai requests python-dotenv
    
    - name: AI Development Assistant
      env:
        DEEPSEEK_API_KEY: ${{ secrets.DEEPSEEK_API_KEY }}
        GLM_API_KEY: ${{ secrets.GLM_API_KEY }}
        GROK_API_KEY: ${{ secrets.GROK_API_KEY }}
        KIMI_API_KEY: ${{ secrets.KIMI_API_KEY }}
        QWEN_API_KEY: ${{ secrets.QWEN_API_KEY }}
        GPTOSS_API_KEY: ${{ secrets.GPTOSS_API_KEY }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        python -c "
        import sys
        sys.path.append('.')
        from ai_service_manager import AIServiceManager
        
        import os
        import requests
        import subprocess
        from datetime import datetime
        
        # Initialize AI manager
        manager = AIServiceManager()
        
        print('🤖 AI Development Assistant Starting...')
        
        # Analyze recent development activity
        try:
            # Get recent commits
            recent_commits = subprocess.check_output('git log --oneline -5', shell=True, text=True).strip()
            
            # Get recent issues
            issues_url = f'https://api.github.com/repos/${{ github.repository }}/issues?state=open&per_page=5'
            headers = {'Authorization': f'Bearer {os.environ[\"GITHUB_TOKEN\"]}'}
            issues_response = requests.get(issues_url, headers=headers)
            
            if issues_response.status_code == 200:
                issues = issues_response.json()
                issue_summary = '\\n'.join([f'- #{issue[\"number\"]}: {issue[\"title\"]}' for issue in issues])
            else:
                issue_summary = 'Unable to fetch issues'
            
            # Generate development insights
            development_prompt = f'''
            Analyze this development activity and provide insights:
            
            Recent Commits:
            {recent_commits}
            
            Open Issues:
            {issue_summary}
            
            Please provide:
            1. Development trend analysis
            2. Priority recommendations
            3. Potential improvements
            4. Next steps for the project
            '''
            
            insights, provider, error = manager.generate_response(
                development_prompt,
                'You are a senior software development consultant. Analyze development activity and provide strategic insights.'
            )
            
            if insights:
                print(f'✅ Development insights generated using {provider}')
                
                # Create development insights issue
                insights_url = f'https://api.github.com/repos/${{ github.repository }}/issues'
                insights_data = {
                    'title': f'🧠 AI Development Insights - {datetime.now().strftime(\"%Y-%m-%d\")}',
                    'body': f'## 🤖 AI Development Insights\n\n{insights}\n\n---\n*Generated by {provider} on {datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")}*',
                    'labels': ['ai-insights', 'development', 'automated']
                }
                
                try:
                    insights_response = requests.post(insights_url, headers=headers, json=insights_data)
                    if insights_response.status_code == 201:
                        print('✅ Development insights issue created')
                    else:
                        print(f'❌ Failed to create insights issue: {insights_response.status_code}')
                except Exception as e:
                    print(f'❌ Error creating insights issue: {e}')
            else:
                print(f'❌ Failed to generate insights: {error}')
                
        except Exception as e:
            print(f'❌ Error in AI development assistant: {e}')
        
        # Show final statistics
        print('\\n📊 Final AI System Statistics:')
        stats = manager.get_provider_stats()
        working_count = 0
        
        for name, stat in stats.items():
            if stat['active'] and stat['has_key']:
                working_count += 1
                print(f'  ✅ {name}: Active (Success: {stat[\"success_rate\"]})')
            else:
                print(f'  ❌ {name}: Inactive')
        
        print(f'\\n🎯 System Status: {working_count}/{len(stats)} APIs working')
        if working_count > 0:
            print('🎉 Multi-API system is operational!')
        else:
            print('⚠️ No APIs are working - check configuration!')
        "