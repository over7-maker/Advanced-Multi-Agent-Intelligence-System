name: AI Incident Response Automation

# Automated incident response and triage using multiple AI models
on:
  issues:
    types: [opened, labeled]
    labels: ['security-incident', 'urgent', 'critical']
  workflow_dispatch:  # Manual trigger
  schedule:
    - cron: '0 */6 * * *'  # Every 6 hours

jobs:
  incident-response:
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      issues: write
      pull-requests: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install openai requests python-dotenv
    
    - name: Incident Response Analysis
      env:
        DEEPSEEK_API_KEY: ${{ secrets.DEEPSEEK_API_KEY }}
        CLAUDE_API_KEY: ${{ secrets.CLAUDE_API_KEY }}
        GPT4_API_KEY: ${{ secrets.GPT4_API_KEY }}
        GLM_API_KEY: ${{ secrets.GLM_API_KEY }}
        GROK_API_KEY: ${{ secrets.GROK_API_KEY }}
        KIMI_API_KEY: ${{ secrets.KIMI_API_KEY }}
        QWEN_API_KEY: ${{ secrets.QWEN_API_KEY }}
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        GPTOSS_API_KEY: ${{ secrets.GPTOSS_API_KEY }}
        REPO_NAME: ${{ github.repository }}
        ISSUE_NUMBER: ${{ github.event.issue.number }}
        ISSUE_TITLE: ${{ github.event.issue.title }}
        ISSUE_BODY: ${{ github.event.issue.body }}
      run: |
        python .github/scripts/ai_incident_response.py
    
    - name: Upload Incident Response Report
      uses: actions/upload-artifact@v4
      with:
        name: incident-response-report
        path: artifacts/incident_response_report.md
        retention-days: 30
    
    - name: Update Issue with Response
      if: github.event_name == 'issues'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = 'artifacts/incident_response_report.md';
          
          if (fs.existsSync(path)) {
            const report = fs.readFileSync(path, 'utf8');
            
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `## ðŸš¨ AI Incident Response Analysis\n\n${report}\n\n---\n\n*Automated incident response by AMAS AI System*`
            });
            
            // Add appropriate labels
            github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              labels: ['ai-analyzed', 'incident-response', 'automated']
            });
          }