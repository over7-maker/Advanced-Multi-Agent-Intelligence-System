#!/usr/bin/env python3
"""
Real AI Comment Poster - Posts verified real AI analysis results
This script validates that real AI was used before posting comments
"""

import json
import os
import sys
from typing import Dict, Any

def validate_real_ai_analysis(analysis_file: str) -> Dict[str, Any]:
    """Validate that the analysis used real AI providers"""
    try:
        with open(analysis_file, 'r') as f:
            data = json.load(f)
        
        # Check for real AI verification
        if not data.get("real_ai_verified", False):
            raise Exception("‚ùå FAKE AI DETECTED - Analysis not verified as real AI")
        
        # Check for specific provider (not generic "AI System")
        provider = data.get("provider", "")
        if provider in ["AI System", "Unknown", "Mock", "Fallback"]:
            raise Exception("‚ùå FAKE AI DETECTED - Generic provider name detected")
        
        # Check for realistic response time
        response_time = data.get("response_time", 0)
        if response_time < 0.1 or response_time > 60:  # Too fast or too slow
            raise Exception("‚ùå FAKE AI DETECTED - Unrealistic response time")
        
        # Check for substantial analysis content
        analysis = data.get("analysis", "")
        if len(analysis) < 100:
            raise Exception("‚ùå FAKE AI DETECTED - Analysis too short/generic")
        
        return data
        
    except FileNotFoundError:
        raise Exception(f"‚ùå Analysis file not found: {analysis_file}")
    except json.JSONDecodeError:
        raise Exception(f"‚ùå Invalid JSON in analysis file: {analysis_file}")

def generate_real_ai_comment(analysis_data: Dict[str, Any], task_type: str) -> str:
    """Generate a comment with real AI verification details"""
    
    provider = analysis_data.get("provider", "Unknown")
    response_time = analysis_data.get("response_time", 0)
    analysis = analysis_data.get("analysis", "")
    attempt = analysis_data.get("attempt_number", 1)
    total_providers = analysis_data.get("total_providers_available", 1)
    timestamp = analysis_data.get("timestamp", "")
    
    # Task-specific headers
    task_headers = {
        "code_quality": "ü§ñ VERIFIED REAL AI Code Quality Analysis",
        "security": "üõ°Ô∏è VERIFIED REAL AI Security Analysis", 
        "performance": "‚ö° VERIFIED REAL AI Performance Analysis",
        "build_analysis": "üöÄ VERIFIED REAL AI Build Analysis",
        "dependency_analysis": "üì¶ VERIFIED REAL AI Dependency Analysis"
    }
    
    header = task_headers.get(task_type, "ü§ñ VERIFIED REAL AI Analysis")
    
    comment = f"""## {header}

**Status:** ‚úÖ Real AI Analysis Completed
**Provider:** {provider} (VERIFIED REAL API CALL)
**Response Time:** {response_time}s (Actual API time)
**Confidence:** Real AI analysis verified ‚úì

### üîç REAL AI Analysis
{analysis}

### üìä Verification Details
- **Real AI Verified:** ‚úÖ Yes
- **API Provider:** {provider} 
- **Attempt:** {attempt}/{total_providers}
- **Timestamp:** {timestamp}

*ü§ñ Generated by REAL AI Provider: {provider}*
*This is NOT a template response - Real AI analysis performed*"""

    return comment

def main():
    if len(sys.argv) < 3:
        print("Usage: python real_ai_comment_poster.py <analysis_file> <task_type>")
        sys.exit(1)
    
    analysis_file = sys.argv[1]
    task_type = sys.argv[2]
    
    try:
        # Validate real AI analysis
        analysis_data = validate_real_ai_analysis(analysis_file)
        
        # Generate comment
        comment = generate_real_ai_comment(analysis_data, task_type)
        
        # Save comment
        with open('pr_comment.md', 'w') as f:
            f.write(comment)
        
        print("‚úÖ REAL AI comment generated successfully")
        print(f"ü§ñ Provider: {analysis_data['provider']}")
        print(f"‚è±Ô∏è Response Time: {analysis_data['response_time']}s")
        
    except Exception as e:
        print(f"‚ùå Error: {str(e)}")
        sys.exit(1)

if __name__ == "__main__":
    main()