#!/usr/bin/env python3
"""
Simple AI Responder Script
A simplified, reliable AI responder for GitHub issues
"""

import os
import json
import requests
from openai import OpenAI
from typing import Optional

def get_ai_response(title: str, body: str, author: str) -> str:
    """Get AI response using available APIs"""
    
    # Try to initialize AI client
    ai_client = None
    model = None
    
    # Try OpenRouter first
    openrouter_key = os.environ.get('OPENROUTER_API_KEY')
    if openrouter_key:
        try:
            ai_client = OpenAI(
                base_url="https://openrouter.ai/api/v1",
                api_key=openrouter_key,
            )
            model = "deepseek/deepseek-chat-v3.1:free"
        except Exception as e:
            print(f"OpenRouter initialization failed: {e}")
    
    # Try DeepSeek direct API
    if not ai_client:
        deepseek_key = os.environ.get('DEEPSEEK_API_KEY')
        if deepseek_key:
            try:
                ai_client = OpenAI(
                    base_url="https://api.deepseek.com/v1",
                    api_key=deepseek_key,
                )
                model = "deepseek-chat"
            except Exception as e:
                print(f"DeepSeek initialization failed: {e}")
    
    if not ai_client:
        return None
    
    # Create prompt
    system_prompt = """You are an AI assistant for the AMAS (Advanced Multi-Agent Intelligence System) project.
This is a sophisticated multi-agent AI system for intelligence analysis and automation.

Your role is to provide helpful, technical, and actionable responses to GitHub issues.
Be concise, professional, and helpful."""
    
    user_prompt = f"""Issue Title: {title}

Issue Description:
{body}

Author: {author}

Please provide a helpful response that addresses this issue. Be specific and actionable."""
    
    try:
        # Use appropriate model
        if model == "deepseek/deepseek-chat-v3.1:free":
            response = ai_client.chat.completions.create(
                extra_headers={
                    "HTTP-Referer": f"https://github.com/{os.environ.get('REPO_NAME', 'unknown/repo')}",
                    "X-Title": "AMAS AI Assistant",
                },
                model=model,
                messages=[
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": user_prompt}
                ],
                temperature=0.7,
                max_tokens=800
            )
        else:
            response = ai_client.chat.completions.create(
                model=model,
                messages=[
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": user_prompt}
                ],
                temperature=0.7,
                max_tokens=800
            )
        
        return response.choices[0].message.content
        
    except Exception as e:
        print(f"AI API call failed: {e}")
        return None

def post_github_comment(comment: str) -> bool:
    """Post comment to GitHub issue"""
    github_token = os.environ.get('GITHUB_TOKEN')
    repo_name = os.environ.get('REPO_NAME')
    issue_number = os.environ.get('ISSUE_NUMBER')
    
    if not all([github_token, repo_name, issue_number]):
        print("Missing required environment variables")
        return False
    
    url = f"https://api.github.com/repos/{repo_name}/issues/{issue_number}/comments"
    
    headers = {
        'Authorization': f'Bearer {github_token}',
        'Accept': 'application/vnd.github.v3+json',
        'Content-Type': 'application/json'
    }
    
    # Add AI signature
    ai_comment = f"""{comment}

---
🤖 *This response was generated by AMAS AI Assistant*
💡 *Powered by your integrated AI models*
📚 *For more help, check the [project documentation](https://github.com/{repo_name}#readme)*
"""
    
    data = {'body': ai_comment}
    
    try:
        response = requests.post(url, headers=headers, json=data)
        response.raise_for_status()
        print(f"✅ Posted AI response to issue #{issue_number}")
        return True
    except requests.exceptions.RequestException as e:
        print(f"❌ Failed to post comment: {e}")
        return False

def main():
    """Main execution function"""
    print("🤖 Starting Simple AI Responder...")
    
    # Get issue details
    issue_title = os.environ.get('ISSUE_TITLE', '')
    issue_body = os.environ.get('ISSUE_BODY', '')
    issue_author = os.environ.get('ISSUE_AUTHOR', '')
    
    print(f"📝 Processing issue: {issue_title}")
    print(f"👤 Author: {issue_author}")
    
    # Get AI response
    print("🧠 Generating AI response...")
    ai_response = get_ai_response(issue_title, issue_body, issue_author)
    
    if ai_response:
        print("✅ AI response generated successfully")
        # Post the response
        success = post_github_comment(ai_response)
        if success:
            print("🎉 Auto-response completed successfully!")
        else:
            print("❌ Failed to post response")
    else:
        print("❌ Failed to generate AI response")
        # Post a fallback message
        fallback_message = f"""Thank you for opening this issue! 🙏

I'm the AMAS AI Assistant, and I'll help analyze your issue. However, I'm currently experiencing some technical difficulties with my AI models.

In the meantime, here are some helpful resources:
- 📚 [Project Documentation](https://github.com/{os.environ.get('REPO_NAME', 'unknown/repo')}#readme)
- 🔧 [Setup Guide](https://github.com/{os.environ.get('REPO_NAME', 'unknown/repo')}/blob/main/SETUP_GUIDE.md)
- 💬 [Discussions](https://github.com/{os.environ.get('REPO_NAME', 'unknown/repo')}/discussions)

A human maintainer will review your issue soon. Thank you for your patience!

---
🤖 *AMAS AI Assistant - Currently in fallback mode*
"""
        post_github_comment(fallback_message)

if __name__ == "__main__":
    main()