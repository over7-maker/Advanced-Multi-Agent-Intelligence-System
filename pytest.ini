[tool:pytest]
# AMAS Intelligence System - Pytest Configuration
# Comprehensive testing configuration with coverage requirements

minversion = 6.0
testpaths = tests
python_files = test_*.py *_test.py
python_classes = Test*
python_functions = test_*

# Test markers
markers =
    slow: marks tests as slow (deselect with '-m "not slow"')
    integration: marks tests as integration tests
    unit: marks tests as unit tests
    security: marks tests as security tests
    performance: marks tests as performance benchmarks
    api: marks tests as API tests
    agents: marks tests as agent tests
    workflows: marks tests as workflow tests
    database: marks tests requiring database
    gpu: marks tests requiring GPU
    external: marks tests requiring external services

# Asyncio configuration
asyncio_mode = auto

# Output configuration
addopts = 
    --verbose
    --tb=short
    --strict-markers
    --strict-config
    --cov=.
    --cov-report=html:htmlcov
    --cov-report=xml:coverage.xml
    --cov-report=term-missing
    --cov-fail-under=80
    --cov-branch
    --junitxml=test-results.xml

# Coverage configuration
[coverage:run]
source = .
omit = 
    tests/*
    venv/*
    .venv/*
    */migrations/*
    */venv/*
    */__pycache__/*
    */site-packages/*
    setup.py
    conftest.py

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    if self.debug:
    if settings.DEBUG
    raise AssertionError
    raise NotImplementedError
    if 0:
    if __name__ == .__main__.:
    class .*\bProtocol\):
    @(abc\.)?abstractmethod

[coverage:html]
directory = htmlcov

[coverage:xml]
output = coverage.xml