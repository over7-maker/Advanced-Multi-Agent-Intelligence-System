[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "amas"
version = "1.0.0"
description = "Advanced Multi-Agent Intelligence System - Sophisticated autonomous AI system for offline operation"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "AMAS Development Team", email = "team@amas.ai"}
]
maintainers = [
    {name = "AMAS Development Team", email = "team@amas.ai"}
]
keywords = [
    "ai", "multi-agent", "intelligence", "autonomous", "offline", 
    "llm", "vector-search", "knowledge-graph", "security"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Distributed Computing",
    "Topic :: Security",
]
requires-python = ">=3.9"
dependencies = [
    "fastapi>=0.104.1",
    "uvicorn[standard]>=0.24.0",
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
    "aiohttp>=3.9.1",
    "httpx>=0.25.2",
    "asyncpg>=0.29.0",
    "psycopg2-binary>=2.9.9",
    "sqlalchemy>=2.0.23",
    "alembic>=1.13.1",
    "redis[hiredis]>=5.0.1",
    "neo4j>=5.15.0",
    "torch>=2.2.0,<3.0",
    "transformers>=4.36.0",
    "sentence-transformers>=2.2.2",
    "faiss-cpu>=1.7.4",
    "numpy>=1.24.3",
    "pandas>=2.1.4",
    "cryptography>=40.0.0,<44.0.0",
    "pyjwt>=2.8.0",
    "bcrypt>=4.1.2",
    "python-dotenv>=1.0.0",
    "pyyaml>=6.0.1",
    "click>=8.1.7",
    "rich>=13.7.0",
    "structlog>=23.2.0",
    "prometheus-client>=0.19.0",
    "tenacity>=8.2.3",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.3",
    "pytest-asyncio>=0.21.1",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "pytest-xdist>=3.5.0",
    "black>=23.11.0",
    "isort>=5.12.0",
    "flake8>=6.1.0",
    "mypy>=1.7.1",
    "pre-commit>=3.5.0",
    "bandit[toml]>=1.7.5",
    "safety>=2.3.0",
    "coverage>=7.3.2",
]
docs = [
    "sphinx>=7.2.6",
    "sphinx-rtd-theme>=1.3.0",
    "myst-parser>=2.0.0",
    "sphinx-autodoc-typehints>=1.25.0",
]
gpu = [
    "torch[cu121]>=2.2.0,<3.0",
    "faiss-gpu>=1.7.4",
]
cpu = [
    "torch>=2.2.0,<3.0",
    "faiss-cpu>=1.7.4",
]
intelligence = [
    "spacy>=3.7.2",
    "nltk>=3.8.1",
    "beautifulsoup4>=4.12.2",
    "selenium>=4.15.2",
    "matplotlib>=3.8.2",
    "seaborn>=0.13.0",
    "plotly>=5.17.0",
    "networkx>=3.2.1",
]
monitoring = [
    "grafana-api>=1.0.3",
    "prometheus-api-client>=0.5.3",
    "psutil>=5.9.6",
]

[project.urls]
Homepage = "https://github.com/over7-maker/Advanced-Multi-Agent-Intelligence-System"
Documentation = "https://github.com/over7-maker/Advanced-Multi-Agent-Intelligence-System/docs"
Repository = "https://github.com/over7-maker/Advanced-Multi-Agent-Intelligence-System"
Issues = "https://github.com/over7-maker/Advanced-Multi-Agent-Intelligence-System/issues"
Changelog = "https://github.com/over7-maker/Advanced-Multi-Agent-Intelligence-System/blob/main/CHANGELOG.md"

[project.scripts]
amas = "amas.cli:main"
amas-setup = "amas.setup:main"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
amas = [
    "config/*.yaml",
    "config/*.json",
    "assets/*",
]

# Black configuration
[tool.black]
line-length = 88
target-version = ['py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort configuration
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["amas"]

# MyPy configuration
[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "torch.*",
    "transformers.*",
    "faiss.*",
    "neo4j.*",
    "redis.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=amas",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "auto"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "e2e: marks tests as end-to-end tests",
    "gpu: marks tests that require GPU",
]

# Coverage configuration
[tool.coverage.run]
source = ["src/amas"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
    "*/site-packages/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# Bandit security configuration
[tool.bandit]
exclude_dirs = ["tests", "build", "dist"]
skips = ["B101", "B601"]  # Skip assert and shell injection in tests

# Flake8 configuration
[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "W503"]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    ".eggs",
    "*.egg-info",
    ".venv",
    "venv",
]

# Pre-commit configuration
[tool.pre-commit]
default_stages = ["commit"]

# Ruff configuration (optional, faster alternative to flake8)
[tool.ruff]
line-length = 88
target-version = "py39"
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]  # imported but unused