{
  "audit_metadata": {
    "audit_type": "comprehensive",
    "create_issues": false,
    "notify_on_failure": false,
    "timestamp": "Sat Oct 11 12:25:22 AM UTC 2025"
  },
  "workflow_audit": {
    "total_workflows": 15,
    "workflow_triggers": {},
    "duplicate_triggers": [],
    "conflicting_triggers": [],
    "trigger_statistics": {
      "total_triggers": 0,
      "unique_triggers": 0,
      "duplicate_count": 0,
      "conflict_count": 0
    }
  },
  "api_key_audit": {
    "direct_usage": [
      {
        "file": "scripts/integrate_universal_ai_manager.py",
        "pattern": "secrets\\.(DEEPSEEK|CLAUDE|GPT4|GLM|GROK|KIMI|QWEN|GEMINI|GPTOSS|GROQAI|CEREBRAS|GEMINIAI|COHERE|NVIDIA|CODESTRAL|GEMINI2|GROQ2|CHUTES)_API_KEY",
        "matches": [
          "GEMINI2",
          "GROQ2"
        ],
        "line_numbers": [
          289,
          290
        ]
      },
      {
        "file": "src/amas/core/ai_api_manager.py",
        "pattern": "getenv\\([\\'\"]?(DEEPSEEK|CLAUDE|GPT4|GLM|GROK|KIMI|QWEN|GEMINI|GPTOSS|GROQAI|CEREBRAS|GEMINIAI|COHERE|NVIDIA|CODESTRAL|GEMINI2|GROQ2|CHUTES)_API_KEY[\\'\"]?\\)",
        "matches": [
          "GEMINI2",
          "GEMINI2",
          "GROQ2",
          "GROQ2"
        ],
        "line_numbers": [
          250,
          253,
          274,
          277
        ]
      },
      {
        "file": "src/amas/services/universal_ai_manager.py",
        "pattern": "getenv\\([\\'\"]?(DEEPSEEK|CLAUDE|GPT4|GLM|GROK|KIMI|QWEN|GEMINI|GPTOSS|GROQAI|CEREBRAS|GEMINIAI|COHERE|NVIDIA|CODESTRAL|GEMINI2|GROQ2|CHUTES)_API_KEY[\\'\"]?\\)",
        "matches": [
          "GEMINI2",
          "GEMINI2",
          "GROQ2",
          "GROQ2"
        ],
        "line_numbers": [
          264,
          267,
          276,
          279
        ]
      },
      {
        "file": "src/amas/config/minimal_config.py",
        "pattern": "getenv\\([\\'\"]?(DEEPSEEK|CLAUDE|GPT4|GLM|GROK|KIMI|QWEN|GEMINI|GPTOSS|GROQAI|CEREBRAS|GEMINIAI|COHERE|NVIDIA|CODESTRAL|GEMINI2|GROQ2|CHUTES)_API_KEY[\\'\"]?\\)",
        "matches": [
          "DEEPSEEK",
          "DEEPSEEK",
          "GLM",
          "GLM",
          "GROK",
          "GROK",
          "NVIDIA",
          "NVIDIA",
          "CODESTRAL",
          "CODESTRAL"
        ],
        "line_numbers": [
          130,
          134,
          143,
          147,
          155,
          159,
          167,
          171,
          179,
          183
        ]
      }
    ],
    "manager_usage": [
      ".github/scripts/enhanced_code_quality_inspector.py",
      ".github/scripts/comprehensive_audit_engine.py",
      ".github/scripts/ai_incident_response.py",
      ".github/scripts/ai_threat_intelligence.py",
      ".github/scripts/ai_security_response.py",
      ".github/scripts/universal_ai_workflow_integration.py",
      ".github/scripts/multi_agent_orchestrator.py",
      ".github/scripts/workflow_audit_monitor.py",
      ".github/scripts/ai_issue_analyzer.py",
      ".github/scripts/ai_auto_fix_applier.py",
      ".github/scripts/ai_osint_collector.py",
      ".github/scripts/ai_workflow_monitor.py",
      ".github/scripts/ai_project_structure_auditor.py",
      ".github/scripts/ai_response_generator.py",
      ".github/scripts/ai_build_analyzer.py",
      ".github/scripts/ai_master_orchestrator.py",
      ".github/scripts/ai_adaptive_prompt_improvement.py",
      "scripts/update_all_ai_scripts_with_fallback.py",
      "scripts/integrate_universal_ai_manager.py",
      "scripts/test_universal_ai_workflow.py",
      "scripts/development/ai_continuous_developer.py",
      "scripts/development/ai_fallback_integration.py",
      "scripts/development/ai_code_improver.py",
      "scripts/development/ai_documentation_generator.py",
      "scripts/development/ai_code_analyzer.py",
      "scripts/development/ai_security_auditor.py",
      "scripts/development/ai_performance_analyzer.py",
      "scripts/maintenance/run_comprehensive_test.py",
      "scripts/maintenance/complete_workflow_setup.py",
      "scripts/maintenance/ultimate_ai_integration.py",
      "src/amas/agents/unified_ai_router.py",
      "src/amas/core/integration_manager.py",
      "src/amas/core/integration_manager_complete.py",
      "src/amas/core/ai_api_manager.py",
      "src/amas/core/api_clients.py",
      "src/amas/services/intelligent_fallback_system.py",
      "src/amas/services/universal_ai_manager.py",
      "src/amas/services/ai_service_manager.py",
      "src/amas/services/ai_fallback_manager.py",
      "src/amas/services/ultimate_fallback_system.py",
      "src/amas/services/llm_service.py",
      "src/amas/config/ai_config.py",
      ".github/workflows/01-ai-agentic-project-self-improver.yml",
      ".github/workflows/ai-enhanced-version-package-build.yml",
      ".github/workflows/05-ai-security-threat-intelligence.yml",
      ".github/workflows/06-ai-code-quality-performance.yml",
      ".github/workflows/03-ai-agent-project-audit-documentation.yml",
      ".github/workflows/ai-agentic-issue-auto-responder.yml",
      ".github/workflows/02-ai-agentic-issue-auto-responder.yml",
      ".github/workflows/07-ai-enhanced-cicd-pipeline.yml",
      ".github/workflows/00-master-ai-orchestrator.yml",
      ".github/workflows/04-ai-enhanced-build-deploy.yml",
      ".github/workflows/ai-agent-project-audit-documentation.yml"
    ],
    "missing_manager": [
      {
        "workflow": "ai-adaptive-prompt-improvement.yml",
        "api_keys": [
          "DEEPSEEK_API_KEY",
          "CLAUDE_API_KEY",
          "GPT4_API_KEY",
          "GLM_API_KEY",
          "GROK_API_KEY",
          "KIMI_API_KEY",
          "QWEN_API_KEY",
          "GEMINI_API_KEY",
          "GPTOSS_API_KEY"
        ],
        "issue": "Uses API keys but not advanced manager"
      },
      {
        "workflow": "comprehensive-audit.yml",
        "api_keys": [
          "DEEPSEEK_API_KEY",
          "CLAUDE_API_KEY",
          "GPT4_API_KEY",
          "GLM_API_KEY",
          "GROK_API_KEY",
          "KIMI_API_KEY",
          "QWEN_API_KEY",
          "GEMINI_API_KEY",
          "GPTOSS_API_KEY",
          "GROQAI_API_KEY",
          "CEREBRAS_API_KEY",
          "GEMINIAI_API_KEY",
          "COHERE_API_KEY",
          "NVIDIA_API_KEY",
          "CODESTRAL_API_KEY",
          "GEMINI2_API_KEY",
          "GROQ2_API_KEY",
          "CHUTES_API_KEY"
        ],
        "issue": "Uses API keys but not advanced manager"
      }
    ],
    "security_issues": [],
    "statistics": {
      "direct_usage_count": 4,
      "manager_usage_count": 53,
      "missing_manager_count": 2,
      "security_issues_count": 0
    }
  },
  "legacy_audit": {
    "stub_workflows": [],
    "legacy_workflows": [
      {
        "workflow": "simple-audit-test.yml",
        "pattern": "simple",
        "issue": "Contains legacy naming pattern"
      }
    ],
    "minimal_workflows": [],
    "broken_workflows": [],
    "statistics": {
      "total_workflows": 15,
      "stub_count": 0,
      "legacy_count": 1,
      "minimal_count": 0,
      "broken_count": 0
    }
  },
  "security_audit": {
    "exposed_secrets": [],
    "insecure_patterns": [
      {
        "file": "auto_fix_critical_issues.py",
        "pattern": "eval\\s*\\(",
        "matches": [
          "eval(",
          "eval(",
          "eval(",
          "eval(",
          "eval("
        ],
        "line_numbers": [
          175,
          176,
          177
        ]
      },
      {
        "file": "auto_fix_critical_issues.py",
        "pattern": "exec\\s*\\(",
        "matches": [
          "exec(",
          "exec(",
          "exec(",
          "exec(",
          "exec("
        ],
        "line_numbers": [
          180,
          181,
          182
        ]
      },
      {
        "file": "auto_fix_critical_issues.py",
        "pattern": "pickle\\.loads?\\s*\\(",
        "matches": [
          "pickle.loads(",
          "pickle.loads("
        ],
        "line_numbers": [
          186,
          187
        ]
      },
      {
        "file": "comprehensive_pre_merge_test.py",
        "pattern": "exec\\s*\\(",
        "matches": [
          "exec("
        ],
        "line_numbers": [
          239
        ]
      },
      {
        "file": "scripts/production_ready_verification.py",
        "pattern": "eval\\s*\\(",
        "matches": [
          "eval(",
          "eval(",
          "eval(",
          "eval("
        ],
        "line_numbers": [
          17,
          18,
          19
        ]
      },
      {
        "file": "scripts/production_ready_verification.py",
        "pattern": "exec\\s*\\(",
        "matches": [
          "exec(",
          "exec("
        ],
        "line_numbers": [
          20,
          21
        ]
      },
      {
        "file": "docker/vector_service.py",
        "pattern": "pickle\\.loads?\\s*\\(",
        "matches": [
          "pickle.load("
        ],
        "line_numbers": [
          102
        ]
      },
      {
        "file": ".github/scripts/security_false_positive_analyzer.py",
        "pattern": "eval\\s*\\(",
        "matches": [
          "eval(",
          "eval("
        ],
        "line_numbers": [
          150,
          151
        ]
      },
      {
        "file": "src/amas/agents/adaptive_personality.py",
        "pattern": "pickle\\.loads?\\s*\\(",
        "matches": [
          "pickle.load("
        ],
        "line_numbers": [
          137
        ]
      },
      {
        "file": "src/amas/services/ml_service.py",
        "pattern": "pickle\\.loads?\\s*\\(",
        "matches": [
          "pickle.load("
        ],
        "line_numbers": [
          578
        ]
      },
      {
        "file": "src/amas/services/enterprise_communication_service.py",
        "pattern": "pickle\\.loads?\\s*\\(",
        "matches": [
          "pickle.loads(",
          "pickle.loads("
        ],
        "line_numbers": [
          834,
          835
        ]
      },
      {
        "file": "src/amas/intelligence/collective_learning.py",
        "pattern": "pickle\\.loads?\\s*\\(",
        "matches": [
          "pickle.load("
        ],
        "line_numbers": [
          147
        ]
      },
      {
        "file": "scripts/maintenance/run_workflow_verification.py",
        "pattern": "exec\\s*\\(",
        "matches": [
          "exec(",
          "exec("
        ],
        "line_numbers": [
          32,
          33
        ]
      }
    ],
    "vulnerable_dependencies": [],
    "permission_issues": [],
    "statistics": {
      "exposed_secrets_count": 0,
      "insecure_patterns_count": 13,
      "vulnerable_dependencies_count": 0,
      "permission_issues_count": 0
    }
  },
  "performance_audit": {},
  "recommendations": [
    {
      "category": "api_keys",
      "priority": "critical",
      "title": "Migrate Direct API Key Usage to Manager",
      "description": "Found 4 instances of direct API key usage",
      "action": "Replace direct API key usage with centralized manager for better failover"
    }
  ],
  "critical_issues": [
    {
      "category": "api_keys",
      "priority": "critical",
      "title": "Migrate Direct API Key Usage to Manager",
      "description": "Found 4 instances of direct API key usage",
      "action": "Replace direct API key usage with centralized manager for better failover"
    }
  ],
  "statistics": {
    "total_issues": 1,
    "critical_issues": 1,
    "high_priority_issues": 0,
    "medium_priority_issues": 0,
    "low_priority_issues": 0,
    "workflow_issues": 0,
    "api_key_issues": 1,
    "legacy_issues": 0,
    "security_issues": 0
  }
}