version: '3.8'

services:
  # AMAS Intelligence System - Phase 1 Enhanced
  amas-core:
    build: .
    container_name: amas-core
    ports:
      - "8000:8000"
    environment:
      - AMAS_MODE=development
      - AMAS_OFFLINE_MODE=true
      - AMAS_GPU_ENABLED=true
      - AMAS_LOG_LEVEL=INFO
      - AMAS_LLM_HOST=ollama:11434
      - AMAS_VECTOR_HOST=vector-service:8001
      - AMAS_GRAPH_HOST=neo4j:7474
      - AMAS_REDIS_HOST=redis:6379
      - AMAS_POSTGRES_HOST=postgres:5432
      - AMAS_POSTGRES_USER=amas
      - AMAS_POSTGRES_PASSWORD=amas123
      - AMAS_POSTGRES_DB=amas
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      neo4j:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
      - ./scripts:/app/scripts
    networks:
      - amas-network
    restart: unless-stopped

  # PostgreSQL Database with health check
  postgres:
    image: postgres:15-alpine
    container_name: amas-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=amas
      - POSTGRES_USER=amas
      - POSTGRES_PASSWORD=amas123
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init_db.sql:/docker-entrypoint-initdb.d/init_db.sql
    networks:
      - amas-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U amas -d amas"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Redis Cache with health check
  redis:
    image: redis:7.2-alpine
    container_name: amas-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - amas-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    restart: unless-stopped

  # Neo4j Knowledge Graph with health check
  neo4j:
    image: neo4j:5.15.0
    container_name: amas-neo4j
    ports:
      - "7474:7474"
      - "7687:7687"
    environment:
      - NEO4J_AUTH=neo4j/amas123
      - NEO4J_PLUGINS=["apoc"]
      - NEO4J_dbms_security_procedures_unrestricted=apoc.*
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
    networks:
      - amas-network
    healthcheck:
      test: ["CMD", "cypher-shell", "-u", "neo4j", "-p", "amas123", "RETURN 1"]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # Ollama LLM Service
  ollama:
    image: ollama/ollama:latest
    container_name: amas-ollama
    ports:
      - "11434:11434"
    environment:
      - OLLAMA_HOST=0.0.0.0
    volumes:
      - ollama_data:/root/.ollama
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    networks:
      - amas-network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  neo4j_data:
  neo4j_logs:
  ollama_data:

networks:
  amas-network:
    driver: bridge
