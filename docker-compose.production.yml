version: '3.8'

# AMAS Intelligence System - Production Deployment
# Advanced Multi-Agent Intelligence System with:
# - GPU acceleration support
# - High availability configuration
# - Security hardening
# - Monitoring and logging
# - Automated backup
# - Load balancing

services:
  # Nginx Load Balancer & Reverse Proxy
  nginx:
    image: nginx:1.25-alpine
    container_name: amas-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - amas-api-1
      - amas-api-2
      - amas-web
    networks:
      - amas-frontend
      - amas-backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # AMAS API Services (Load Balanced)
  amas-api-1:
    build:
      context: .
      dockerfile: docker/Dockerfile.api
      args:
        - BUILD_ENV=production
    container_name: amas-api-1
    environment:
      - AMAS_MODE=production
      - AMAS_INSTANCE_ID=api-1
      - AMAS_GPU_ENABLED=true
      - AMAS_LOG_LEVEL=INFO
      - AMAS_POSTGRES_HOST=postgres
      - AMAS_REDIS_HOST=redis
      - AMAS_NEO4J_HOST=neo4j
      - AMAS_OLLAMA_HOST=ollama
      - JWT_SECRET=${JWT_SECRET}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      - ALLOWED_ORIGINS=https://amas.yourdomain.com
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
      - ./models:/app/models
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      neo4j:
        condition: service_healthy
      ollama:
        condition: service_started
    networks:
      - amas-backend
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  amas-api-2:
    build:
      context: .
      dockerfile: docker/Dockerfile.api
      args:
        - BUILD_ENV=production
    container_name: amas-api-2
    environment:
      - AMAS_MODE=production
      - AMAS_INSTANCE_ID=api-2
      - AMAS_GPU_ENABLED=true
      - AMAS_LOG_LEVEL=INFO
      - AMAS_POSTGRES_HOST=postgres
      - AMAS_REDIS_HOST=redis
      - AMAS_NEO4J_HOST=neo4j
      - AMAS_OLLAMA_HOST=ollama
      - JWT_SECRET=${JWT_SECRET}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      - ALLOWED_ORIGINS=https://amas.yourdomain.com
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
      - ./models:/app/models
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      neo4j:
        condition: service_healthy
      ollama:
        condition: service_started
    networks:
      - amas-backend
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # AMAS Web Interface
  amas-web:
    build:
      context: ./web
      dockerfile: Dockerfile
      args:
        - BUILD_ENV=production
        - REACT_APP_API_URL=https://amas.yourdomain.com/api
    container_name: amas-web
    environment:
      - NODE_ENV=production
    networks:
      - amas-frontend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL Database (Primary)
  postgres:
    image: postgres:15-alpine
    container_name: amas-postgres
    environment:
      - POSTGRES_DB=amas
      - POSTGRES_USER=amas
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init_db.sql:/docker-entrypoint-initdb.d/init_db.sql
      - ./backups/postgres:/backups
    networks:
      - amas-backend
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U amas -d amas"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: >
      postgres
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200

  # Redis Cache & Session Store
  redis:
    image: redis:7.2-alpine
    container_name: amas-redis
    command: >
      redis-server
      --appendonly yes
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
    volumes:
      - redis_data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - amas-backend
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 512M
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Neo4j Knowledge Graph
  neo4j:
    image: neo4j:5.15.0-enterprise
    container_name: amas-neo4j
    environment:
      - NEO4J_AUTH=neo4j/${NEO4J_PASSWORD}
      - NEO4J_PLUGINS=["apoc", "graph-data-science"]
      - NEO4J_dbms_security_procedures_unrestricted=apoc.*,gds.*
      - NEO4J_dbms_memory_heap_initial_size=512m
      - NEO4J_dbms_memory_heap_max_size=2G
      - NEO4J_dbms_memory_pagecache_size=1G
      - NEO4J_ACCEPT_LICENSE_AGREEMENT=yes
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - neo4j_import:/var/lib/neo4j/import
      - neo4j_plugins:/plugins
      - ./backups/neo4j:/backups
    ports:
      - "7474:7474"
      - "7687:7687"
    networks:
      - amas-backend
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G
    healthcheck:
      test: ["CMD", "cypher-shell", "-u", "neo4j", "-p", "${NEO4J_PASSWORD}", "RETURN 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Ollama LLM Service with GPU Support
  ollama:
    image: ollama/ollama:latest
    container_name: amas-ollama
    environment:
      - OLLAMA_HOST=0.0.0.0
      - OLLAMA_MODELS=/root/.ollama/models
      - OLLAMA_NUM_PARALLEL=4
      - OLLAMA_MAX_LOADED_MODELS=3
      - CUDA_VISIBLE_DEVICES=0
    volumes:
      - ollama_data:/root/.ollama
      - ./models/ollama:/root/.ollama/models
    ports:
      - "11434:11434"
    networks:
      - amas-backend
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 16G
        reservations:
          memory: 8G
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/tags"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Vector Search Service (FAISS)
  vector-service:
    build:
      context: ./services/vector
      dockerfile: Dockerfile
    container_name: amas-vector-service
    environment:
      - VECTOR_STORAGE_PATH=/data/vectors
      - GPU_ENABLED=true
      - MAX_VECTORS=1000000
    volumes:
      - vector_data:/data/vectors
    ports:
      - "8001:8001"
    networks:
      - amas-backend
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 4G
        reservations:
          cpus: '0.5'
          memory: 2G
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:v2.47.0
    container_name: amas-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - amas-backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:10.1.0
    container_name: amas-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    ports:
      - "3001:3000"
    networks:
      - amas-backend
      - amas-frontend
    restart: unless-stopped
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Elasticsearch for Logs
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.10.0
    container_name: amas-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms1g -Xmx2g"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - amas-backend
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 3G
        reservations:
          memory: 2G
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Kibana for Log Analysis
  kibana:
    image: docker.elastic.co/kibana/kibana:8.10.0
    container_name: amas-kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    networks:
      - amas-backend
      - amas-frontend
    restart: unless-stopped
    depends_on:
      elasticsearch:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5601/api/status || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Backup Service
  backup:
    build:
      context: ./services/backup
      dockerfile: Dockerfile
    container_name: amas-backup
    environment:
      - BACKUP_SCHEDULE=0 2 * * *  # Daily at 2 AM
      - POSTGRES_HOST=postgres
      - POSTGRES_DB=amas
      - POSTGRES_USER=amas
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - NEO4J_HOST=neo4j
      - NEO4J_PASSWORD=${NEO4J_PASSWORD}
      - BACKUP_RETENTION_DAYS=30
      - S3_BUCKET=${S3_BACKUP_BUCKET}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
    volumes:
      - ./backups:/backups
      - postgres_data:/postgres_data:ro
      - neo4j_data:/neo4j_data:ro
      - redis_data:/redis_data:ro
    networks:
      - amas-backend
    restart: unless-stopped
    depends_on:
      - postgres
      - neo4j
      - redis

volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/amas/data/postgres
  
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/amas/data/redis
  
  neo4j_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/amas/data/neo4j
  
  neo4j_logs:
    driver: local
  
  neo4j_import:
    driver: local
  
  neo4j_plugins:
    driver: local
  
  ollama_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/amas/data/ollama
  
  vector_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/amas/data/vectors
  
  prometheus_data:
    driver: local
  
  grafana_data:
    driver: local
  
  elasticsearch_data:
    driver: local

networks:
  amas-frontend:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/24
  
  amas-backend:
    driver: bridge
    internal: true
    ipam:
      driver: default
      config:
        - subnet: 172.21.0.0/24