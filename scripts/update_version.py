#!/usr/bin/env python3
"""
Update Version Files
"""

import os
import sys
import re
from typing import Dict, Any

def main():
    print("üìù Version Updater")
    print("=" * 40)
    
    # Get arguments
    version = os.environ.get('VERSION', 'v1.0.0')
    release_type = os.environ.get('RELEASE_TYPE', 'minor')
    
    print(f"üìã Version: {version}")
    print(f"üè∑Ô∏è Type: {release_type}")
    
    # Update version files
    update_package_json(version)
    update_pyproject_toml(version)
    update_readme(version)
    update_workflows(version)
    
    print("‚úÖ Version files updated")
    return True

def update_package_json(version: str):
    """Update package.json if it exists"""
    if os.path.exists('package.json'):
        print("üì¶ Updating package.json...")
        with open('package.json', 'r') as f:
            content = f.read()
        
        # Update version
        content = re.sub(r'"version": "[^"]*"', f'"version": "{version.lstrip("v")}"', content)
        
        with open('package.json', 'w') as f:
            f.write(content)
        
        print("‚úÖ package.json updated")

def update_pyproject_toml(version: str):
    """Update pyproject.toml if it exists"""
    if os.path.exists('pyproject.toml'):
        print("üêç Updating pyproject.toml...")
        with open('pyproject.toml', 'r') as f:
            content = f.read()
        
        # Update version
        content = re.sub(r'version = "[^"]*"', f'version = "{version.lstrip("v")}"', content)
        
        with open('pyproject.toml', 'w') as f:
            f.write(content)
        
        print("‚úÖ pyproject.toml updated")

def update_readme(version: str):
    """Update README.md with version info"""
    if os.path.exists('README.md'):
        print("üìñ Updating README.md...")
        with open('README.md', 'r') as f:
            content = f.read()
        
        # Add version badge if not exists
        if '![Version]' not in content:
            version_badge = f'![Version](https://img.shields.io/badge/version-{version}-blue.svg)'
            content = content.replace('# AMAS', f'# AMAS\n\n{version_badge}')
        
        with open('README.md', 'w') as f:
            f.write(content)
        
        print("‚úÖ README.md updated")

def update_workflows(version: str):
    """Update workflow files with version info"""
    workflows_dir = '.github/workflows'
    if os.path.exists(workflows_dir):
        print("üîÑ Updating workflow files...")
        for file in os.listdir(workflows_dir):
            if file.endswith('.yml') or file.endswith('.yaml'):
                file_path = os.path.join(workflows_dir, file)
                with open(file_path, 'r') as f:
                    content = f.read()
                
                # Add version comment
                if f'# Version: {version}' not in content:
                    content = f'# Version: {version}\n# Generated by AMAS Release System\n{content}'
                    
                    with open(file_path, 'w') as f:
                        f.write(content)
        
        print("‚úÖ Workflow files updated")

if __name__ == "__main__":
    try:
        success = main()
        sys.exit(0 if success else 1)
    except Exception as e:
        print(f"‚ùå Version update failed: {e}")
        sys.exit(1)